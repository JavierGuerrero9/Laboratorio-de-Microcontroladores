

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Jun 03 14:32:16 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.35
    29                           ; Generated 05/05/2021 GMT
    30                           ; 
    31                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F45K50 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	smallconst
    65  000800                     __psmallconst:
    66                           	callstack 0
    67  000800  00                 	db	0
    68  000801                     _kbdMatrix:
    69                           	callstack 0
    70  000801  31                 	db	49
    71  000802  32                 	db	50
    72  000803  33                 	db	51
    73  000804  2B                 	db	43
    74  000805  34                 	db	52
    75  000806  35                 	db	53
    76  000807  36                 	db	54
    77  000808  2D                 	db	45
    78  000809  37                 	db	55
    79  00080A  38                 	db	56
    80  00080B  39                 	db	57
    81  00080C  2A                 	db	42
    82  00080D  3D                 	db	61
    83  00080E  30                 	db	48
    84  00080F  43                 	db	67
    85  000810  2F                 	db	47
    86  000811                     __end_of_kbdMatrix:
    87                           	callstack 0
    88  0000                     _TRISCbits	set	3988
    89  0000                     _TRISD	set	3989
    90  0000                     _LATC	set	3979
    91  0000                     _ANSELB	set	3932
    92  0000                     _OSCCON	set	4051
    93  0000                     _INTCON2bits	set	4081
    94  0000                     _PORTB	set	3969
    95  0000                     _WPUB	set	3973
    96  0000                     _TRISB	set	3987
    97  0000                     _LATB	set	3978
    98  0000                     _LATD	set	3980
    99  0000                     _LATCbits	set	3979
   100  000811                     STR_2:
   101  000811  2D                 	db	45
   102  000812  4D                 	db	77	;'M'
   103  000813  61                 	db	97	;'a'
   104  000814  74                 	db	116	;'t'
   105  000815  68                 	db	104	;'h'
   106  000816  20                 	db	32
   107  000817  45                 	db	69	;'E'
   108  000818  72                 	db	114	;'r'
   109  000819  72                 	db	114	;'r'
   110  00081A  6F                 	db	111	;'o'
   111  00081B  72                 	db	114	;'r'
   112  00081C  00                 	db	0
   113  00081D                     STR_1:
   114  00081D  2D                 	db	45
   115  00081E  2D                 	db	45
   116  00081F  00                 	db	0
   117  000820  00                 	db	0	; dummy byte at the end
   118  0000                     
   119                           ; #config settings
   120                           
   121                           	psect	cinit
   122  001040                     __pcinit:
   123                           	callstack 0
   124  001040                     start_initialization:
   125                           	callstack 0
   126  001040                     __initialization:
   127                           	callstack 0
   128                           
   129                           ; Clear objects allocated to COMRAM (6 bytes)
   130  001040  6A1A               	clrf	(__pbssCOMRAM+5)& (0+255),c
   131  001042  6A19               	clrf	(__pbssCOMRAM+4)& (0+255),c
   132  001044  6A18               	clrf	(__pbssCOMRAM+3)& (0+255),c
   133  001046  6A17               	clrf	(__pbssCOMRAM+2)& (0+255),c
   134  001048  6A16               	clrf	(__pbssCOMRAM+1)& (0+255),c
   135  00104A  6A15               	clrf	__pbssCOMRAM& (0+255),c
   136  00104C                     end_of_initialization:
   137                           	callstack 0
   138  00104C                     __end_of__initialization:
   139                           	callstack 0
   140  00104C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   141  00104E  6EF8               	movwf	tblptru,c
   142  001050  0100               	movlb	0
   143  001052  EF19  F005         	goto	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMRAM
   146  000015                     __pbssCOMRAM:
   147                           	callstack 0
   148  000015                     _num2:
   149                           	callstack 0
   150  000015                     	ds	2
   151  000017                     _num1:
   152                           	callstack 0
   153  000017                     	ds	2
   154  000019                     _oper:
   155                           	callstack 0
   156  000019                     	ds	1
   157  00001A                     _key:
   158                           	callstack 0
   159  00001A                     	ds	1
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	callstack 0
   164  000001                     ??_send_to_LCD:
   165  000001                     ??_kbd_scanner:
   166  000001                     ?___wmul:
   167                           	callstack 0
   168  000001                     ?___awdiv:
   169                           	callstack 0
   170  000001                     LCD_cmd@cx:
   171                           	callstack 0
   172  000001                     ___wmul@multiplier:
   173                           	callstack 0
   174  000001                     ___awdiv@dividend:
   175                           	callstack 0
   176                           
   177                           ; 2 bytes @ 0x0
   178  000001                     	ds	1
   179  000002                     ??_LCD_init:
   180                           
   181                           ; 1 bytes @ 0x1
   182  000002                     	ds	1
   183  000003                     ??_get_Key:
   184  000003                     send_to_LCD@xy:
   185                           	callstack 0
   186  000003                     ___wmul@multiplicand:
   187                           	callstack 0
   188  000003                     ___awdiv@divisor:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x2
   192  000003                     	ds	1
   193  000004                     write_string_LCD@s:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x3
   197  000004                     	ds	1
   198  000005                     ___awdiv@counter:
   199                           	callstack 0
   200  000005                     ___wmul@product:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000005                     	ds	1
   205  000006                     ___awdiv@sign:
   206                           	callstack 0
   207  000006                     disp_Error@numb:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0x5
   211  000006                     	ds	1
   212  000007                     ___awdiv@quotient:
   213                           	callstack 0
   214                           
   215                           ; 2 bytes @ 0x6
   216  000007                     	ds	1
   217  000008                     ??_disp_Error:
   218                           
   219                           ; 1 bytes @ 0x7
   220  000008                     	ds	1
   221  000009                     disp_Res@numb:
   222                           	callstack 0
   223                           
   224                           ; 2 bytes @ 0x8
   225  000009                     	ds	1
   226  00000A                     ?_get_Num:
   227                           	callstack 0
   228  00000A                     get_Func@chf:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0x9
   232  00000A                     	ds	1
   233  00000B                     disp_Res@UnitDigit:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0xA
   237  00000B                     	ds	1
   238  00000C                     ??_get_Num:
   239  00000C                     disp_Res@TenthDigit:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0xB
   243  00000C                     	ds	2
   244  00000E                     get_Num@ch:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0xD
   248  00000E                     	ds	1
   249  00000F                     get_Num@num:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0xE
   253  00000F                     	ds	2
   254  000011                     ??_main:
   255                           
   256                           ; 1 bytes @ 0x10
   257  000011                     	ds	2
   258  000013                     _main$876:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x12
   262  000013                     	ds	2
   263                           
   264 ;;
   265 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   266 ;;
   267 ;; *************** function _main *****************
   268 ;; Defined at:
   269 ;;		line 23 in file "MainP7.c"
   270 ;; Parameters:    Size  Location     Type
   271 ;;		None
   272 ;; Auto vars:     Size  Location     Type
   273 ;;		None
   274 ;; Return value:  Size  Location     Type
   275 ;;                  1    wreg      void 
   276 ;; Registers used:
   277 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   278 ;; Tracked objects:
   279 ;;		On entry : 0/0
   280 ;;		On exit  : 0/0
   281 ;;		Unchanged: 0/0
   282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   283 ;;      Params:         0       0       0       0       0       0       0       0       0
   284 ;;      Locals:         2       0       0       0       0       0       0       0       0
   285 ;;      Temps:          2       0       0       0       0       0       0       0       0
   286 ;;      Totals:         4       0       0       0       0       0       0       0       0
   287 ;;Total ram usage:        4 bytes
   288 ;; Hardware stack levels required when called: 4
   289 ;; This function calls:
   290 ;;		_LCD_cmd
   291 ;;		_LCD_init
   292 ;;		___awdiv
   293 ;;		___wmul
   294 ;;		_disp_Error
   295 ;;		_disp_Res
   296 ;;		_get_Func
   297 ;;		_get_Key
   298 ;;		_get_Num
   299 ;;		_kbd_init
   300 ;;		_send_to_LCD
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text0
   307  000A32                     __ptext0:
   308                           	callstack 0
   309  000A32                     _main:
   310                           	callstack 27
   311  000A32                     
   312                           ;MainP7.c: 24:     OSCCON = 0x74;
   313  000A32  0E74               	movlw	116
   314  000A34  6ED3               	movwf	211,c	;volatile
   315  000A36                     
   316                           ;MainP7.c: 25:     LCD_init();
   317  000A36  EC56  F007         	call	_LCD_init	;wreg free
   318  000A3A                     
   319                           ;MainP7.c: 26:     kbd_init();
   320  000A3A  EC35  F008         	call	_kbd_init	;wreg free
   321  000A3E                     l1785:
   322                           
   323                           ;MainP7.c: 28:         key = get_Key();
   324  000A3E  ECBF  F007         	call	_get_Key	;wreg free
   325  000A42  6E1A               	movwf	_key^0,c
   326  000A44                     
   327                           ;MainP7.c: 29:         send_to_LCD(key);
   328  000A44  501A               	movf	_key^0,w,c
   329  000A46  ECF8  F007         	call	_send_to_LCD
   330  000A4A                     
   331                           ;MainP7.c: 30:         num1 = get_Num(key);
   332  000A4A  501A               	movf	_key^0,w,c
   333  000A4C  ECF3  F005         	call	_get_Num
   334  000A50  C00A  F017         	movff	?_get_Num,_num1
   335  000A54  C00B  F018         	movff	?_get_Num+1,_num1+1
   336  000A58                     
   337                           ;MainP7.c: 31:         if (num1 != 13){
   338  000A58  0E0D               	movlw	13
   339  000A5A  1817               	xorwf	_num1^0,w,c
   340  000A5C  1018               	iorwf	(_num1+1)^0,w,c
   341  000A5E  B4D8               	btfsc	status,2,c
   342  000A60  EF34  F005         	goto	u361
   343  000A64  EF36  F005         	goto	u360
   344  000A68                     u361:
   345  000A68  EF1F  F005         	goto	l1785
   346  000A6C                     u360:
   347  000A6C                     
   348                           ;MainP7.c: 32:             key = get_Key();
   349  000A6C  ECBF  F007         	call	_get_Key	;wreg free
   350  000A70  6E1A               	movwf	_key^0,c
   351  000A72                     
   352                           ;MainP7.c: 33:             send_to_LCD(key);
   353  000A72  501A               	movf	_key^0,w,c
   354  000A74  ECF8  F007         	call	_send_to_LCD
   355  000A78                     
   356                           ;MainP7.c: 34:             oper = get_Func(key);
   357  000A78  501A               	movf	_key^0,w,c
   358  000A7A  ECE3  F006         	call	_get_Func
   359  000A7E  6E19               	movwf	_oper^0,c
   360  000A80                     
   361                           ;MainP7.c: 35:             if (oper != 'e'){
   362  000A80  0E65               	movlw	101
   363  000A82  1819               	xorwf	_oper^0,w,c
   364  000A84  B4D8               	btfsc	status,2,c
   365  000A86  EF47  F005         	goto	u371
   366  000A8A  EF49  F005         	goto	u370
   367  000A8E                     u371:
   368  000A8E  EF1F  F005         	goto	l1785
   369  000A92                     u370:
   370  000A92                     
   371                           ;MainP7.c: 36:                 key = get_Key();
   372  000A92  ECBF  F007         	call	_get_Key	;wreg free
   373  000A96  6E1A               	movwf	_key^0,c
   374  000A98                     
   375                           ;MainP7.c: 37:                 send_to_LCD(key);
   376  000A98  501A               	movf	_key^0,w,c
   377  000A9A  ECF8  F007         	call	_send_to_LCD
   378  000A9E                     
   379                           ;MainP7.c: 38:                 num2 = get_Num(key);
   380  000A9E  501A               	movf	_key^0,w,c
   381  000AA0  ECF3  F005         	call	_get_Num
   382  000AA4  C00A  F015         	movff	?_get_Num,_num2
   383  000AA8  C00B  F016         	movff	?_get_Num+1,_num2+1
   384  000AAC                     
   385                           ;MainP7.c: 39:                 if (num2 != 13){
   386  000AAC  0E0D               	movlw	13
   387  000AAE  1815               	xorwf	_num2^0,w,c
   388  000AB0  1016               	iorwf	(_num2+1)^0,w,c
   389  000AB2  B4D8               	btfsc	status,2,c
   390  000AB4  EF5E  F005         	goto	u381
   391  000AB8  EF60  F005         	goto	u380
   392  000ABC                     u381:
   393  000ABC  EF1F  F005         	goto	l1785
   394  000AC0                     u380:
   395  000AC0                     
   396                           ;MainP7.c: 40:                     key = get_Key();
   397  000AC0  ECBF  F007         	call	_get_Key	;wreg free
   398  000AC4  6E1A               	movwf	_key^0,c
   399  000AC6                     
   400                           ;MainP7.c: 41:                     send_to_LCD(key);
   401  000AC6  501A               	movf	_key^0,w,c
   402  000AC8  ECF8  F007         	call	_send_to_LCD
   403  000ACC                     
   404                           ;MainP7.c: 42:                     if (key == '='){
   405  000ACC  0E3D               	movlw	61
   406  000ACE  181A               	xorwf	_key^0,w,c
   407  000AD0  A4D8               	btfss	status,2,c
   408  000AD2  EF6D  F005         	goto	u391
   409  000AD6  EF6F  F005         	goto	u390
   410  000ADA                     u391:
   411  000ADA  EFD9  F005         	goto	l1839
   412  000ADE                     u390:
   413  000ADE                     
   414                           ;MainP7.c: 43:                         LCD_cmd(0x00);
   415  000ADE  0E00               	movlw	0
   416  000AE0  EC2B  F008         	call	_LCD_cmd
   417                           
   418                           ;MainP7.c: 44:                         switch (oper){
   419  000AE4  EFBC  F005         	goto	l1837
   420  000AE8                     l1817:
   421  000AE8  5015               	movf	_num2^0,w,c
   422  000AEA  2417               	addwf	_num1^0,w,c
   423  000AEC  6E09               	movwf	disp_Res@numb^0,c
   424  000AEE  5016               	movf	(_num2+1)^0,w,c
   425  000AF0  2018               	addwfc	(_num1+1)^0,w,c
   426  000AF2  6E0A               	movwf	(disp_Res@numb+1)^0,c
   427  000AF4  EC21  F007         	call	_disp_Res	;wreg free
   428  000AF8  0E02               	movlw	2
   429  000AFA  EC2B  F008         	call	_LCD_cmd
   430  000AFE  EF1F  F005         	goto	l1785
   431  000B02                     l1821:
   432  000B02  5015               	movf	_num2^0,w,c
   433  000B04  5C17               	subwf	_num1^0,w,c
   434  000B06  6E09               	movwf	disp_Res@numb^0,c
   435  000B08  5016               	movf	(_num2+1)^0,w,c
   436  000B0A  5818               	subwfb	(_num1+1)^0,w,c
   437  000B0C  6E0A               	movwf	(disp_Res@numb+1)^0,c
   438  000B0E  EC21  F007         	call	_disp_Res	;wreg free
   439  000B12  0E02               	movlw	2
   440  000B14  EC2B  F008         	call	_LCD_cmd
   441  000B18  EF1F  F005         	goto	l1785
   442  000B1C                     l1825:
   443  000B1C  C017  F001         	movff	_num1,___wmul@multiplier
   444  000B20  C018  F002         	movff	_num1+1,___wmul@multiplier+1
   445  000B24  C015  F003         	movff	_num2,___wmul@multiplicand
   446  000B28  C016  F004         	movff	_num2+1,___wmul@multiplicand+1
   447  000B2C  EC0D  F008         	call	___wmul	;wreg free
   448  000B30  C001  F009         	movff	?___wmul,disp_Res@numb
   449  000B34  C002  F00A         	movff	?___wmul+1,disp_Res@numb+1
   450  000B38  EC21  F007         	call	_disp_Res	;wreg free
   451  000B3C  0E02               	movlw	2
   452  000B3E  EC2B  F008         	call	_LCD_cmd
   453  000B42  EF1F  F005         	goto	l1785
   454  000B46                     l1829:
   455  000B46  C017  F001         	movff	_num1,___awdiv@dividend
   456  000B4A  C018  F002         	movff	_num1+1,___awdiv@dividend+1
   457  000B4E  C015  F003         	movff	_num2,___awdiv@divisor
   458  000B52  C016  F004         	movff	_num2+1,___awdiv@divisor+1
   459  000B56  EC81  F006         	call	___awdiv	;wreg free
   460  000B5A  C001  F013         	movff	?___awdiv,_main$876
   461  000B5E  C002  F014         	movff	?___awdiv+1,_main$876+1
   462  000B62  C013  F009         	movff	_main$876,disp_Res@numb
   463  000B66  C014  F00A         	movff	_main$876+1,disp_Res@numb+1
   464  000B6A  EC21  F007         	call	_disp_Res	;wreg free
   465  000B6E  0E02               	movlw	2
   466  000B70  EC2B  F008         	call	_LCD_cmd
   467  000B74  EF1F  F005         	goto	l1785
   468  000B78                     l1837:
   469  000B78  5019               	movf	_oper^0,w,c
   470  000B7A  6E11               	movwf	??_main^0,c
   471  000B7C  6A12               	clrf	(??_main+1)^0,c
   472                           
   473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   474                           ; Switch size 1, requested type "simple"
   475                           ; Number of cases is 1, Range of values is 0 to 0
   476                           ; switch strategies available:
   477                           ; Name         Instructions Cycles
   478                           ; simple_byte            4     3 (average)
   479                           ;	Chosen strategy is simple_byte
   480  000B7E  5012               	movf	(??_main+1)^0,w,c
   481  000B80  0A00               	xorlw	0	; case 0
   482  000B82  B4D8               	btfsc	status,2,c
   483  000B84  EFC6  F005         	goto	l1989
   484  000B88  EFEF  F005         	goto	l39
   485  000B8C                     l1989:
   486                           
   487                           ; Switch size 1, requested type "simple"
   488                           ; Number of cases is 4, Range of values is 42 to 47
   489                           ; switch strategies available:
   490                           ; Name         Instructions Cycles
   491                           ; simple_byte           13     7 (average)
   492                           ;	Chosen strategy is simple_byte
   493  000B8C  5011               	movf	??_main^0,w,c
   494  000B8E  0A2A               	xorlw	42	; case 42
   495  000B90  B4D8               	btfsc	status,2,c
   496  000B92  EF8E  F005         	goto	l1825
   497  000B96  0A01               	xorlw	1	; case 43
   498  000B98  B4D8               	btfsc	status,2,c
   499  000B9A  EF74  F005         	goto	l1817
   500  000B9E  0A06               	xorlw	6	; case 45
   501  000BA0  B4D8               	btfsc	status,2,c
   502  000BA2  EF81  F005         	goto	l1821
   503  000BA6  0A02               	xorlw	2	; case 47
   504  000BA8  B4D8               	btfsc	status,2,c
   505  000BAA  EFA3  F005         	goto	l1829
   506  000BAE  EFEF  F005         	goto	l39
   507  000BB2                     l1839:
   508  000BB2  0E43               	movlw	67
   509  000BB4  181A               	xorwf	_key^0,w,c
   510  000BB6  A4D8               	btfss	status,2,c
   511  000BB8  EFE0  F005         	goto	u401
   512  000BBC  EFE2  F005         	goto	u400
   513  000BC0                     u401:
   514  000BC0  EFE7  F005         	goto	l1843
   515  000BC4                     u400:
   516  000BC4                     
   517                           ;MainP7.c: 51:                         LCD_cmd(0b00000001);
   518  000BC4  0E01               	movlw	1
   519  000BC6  EC2B  F008         	call	_LCD_cmd
   520                           
   521                           ;MainP7.c: 52:                     } else disp_Error(0);
   522  000BCA  EF1F  F005         	goto	l1785
   523  000BCE                     l1843:
   524  000BCE  0E00               	movlw	0
   525  000BD0  6E07               	movwf	(disp_Error@numb+1)^0,c
   526  000BD2  0E00               	movlw	0
   527  000BD4  6E06               	movwf	disp_Error@numb^0,c
   528  000BD6  EC8B  F007         	call	_disp_Error	;wreg free
   529  000BDA  EF1F  F005         	goto	l1785
   530  000BDE                     l39:
   531  000BDE  EF1F  F005         	goto	l1785
   532  000BE2  EF00  F000         	goto	start
   533  000BE6                     __end_of_main:
   534                           	callstack 0
   535                           
   536 ;; *************** function _kbd_init *****************
   537 ;; Defined at:
   538 ;;		line 5 in file "../4x4_kbd_Driver.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;		None
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   552 ;;      Params:         0       0       0       0       0       0       0       0       0
   553 ;;      Locals:         0       0       0       0       0       0       0       0       0
   554 ;;      Temps:          0       0       0       0       0       0       0       0       0
   555 ;;      Totals:         0       0       0       0       0       0       0       0       0
   556 ;;Total ram usage:        0 bytes
   557 ;; Hardware stack levels used: 1
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text1
   566  00106A                     __ptext1:
   567                           	callstack 0
   568  00106A                     _kbd_init:
   569                           	callstack 30
   570  00106A                     
   571                           ;../4x4_kbd_Driver.c: 6:     ANSELB = 0x00;
   572  00106A  0E00               	movlw	0
   573  00106C  010F               	movlb	15	; () banked
   574  00106E  6F5C               	movwf	92,b	;volatile
   575                           
   576                           ;../4x4_kbd_Driver.c: 7:     TRISB = 0x0F;
   577  001070  0E0F               	movlw	15
   578  001072  6E93               	movwf	147,c	;volatile
   579                           
   580                           ;../4x4_kbd_Driver.c: 13:     WPUB = 0x0F;
   581  001074  0E0F               	movlw	15
   582  001076  6E85               	movwf	133,c	;volatile
   583  001078                     
   584                           ; BSR set to: 15
   585                           ;../4x4_kbd_Driver.c: 15:     INTCON2bits.RBPU = 0;
   586  001078  9EF1               	bcf	241,7,c	;volatile
   587  00107A                     
   588                           ; BSR set to: 15
   589  00107A  0012               	return		;funcret
   590  00107C                     __end_of_kbd_init:
   591                           	callstack 0
   592                           
   593 ;; *************** function _get_Num *****************
   594 ;; Defined at:
   595 ;;		line 60 in file "MainP7.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  ch              1    wreg     unsigned char 
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  ch              1   13[COMRAM] unsigned char 
   600 ;;  num             2   14[COMRAM] int 
   601 ;; Return value:  Size  Location     Type
   602 ;;                  2    9[COMRAM] int 
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   610 ;;      Params:         2       0       0       0       0       0       0       0       0
   611 ;;      Locals:         3       0       0       0       0       0       0       0       0
   612 ;;      Temps:          2       0       0       0       0       0       0       0       0
   613 ;;      Totals:         7       0       0       0       0       0       0       0       0
   614 ;;Total ram usage:        7 bytes
   615 ;; Hardware stack levels used: 1
   616 ;; Hardware stack levels required when called: 3
   617 ;; This function calls:
   618 ;;		_LCD_cmd
   619 ;;		_disp_Error
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           	psect	text2
   626  000BE6                     __ptext2:
   627                           	callstack 0
   628  000BE6                     _get_Num:
   629                           	callstack 27
   630                           
   631                           ; BSR set to: 15
   632                           ;incstack = 0
   633                           ;get_Num@ch stored from wreg
   634  000BE6  6E0E               	movwf	get_Num@ch^0,c
   635  000BE8                     
   636                           ;MainP7.c: 62:     switch(ch){
   637  000BE8  EF43  F006         	goto	l1723
   638  000BEC                     l1693:
   639  000BEC  0E00               	movlw	0
   640  000BEE  6E10               	movwf	(get_Num@num+1)^0,c
   641  000BF0  0E00               	movlw	0
   642  000BF2  6E0F               	movwf	get_Num@num^0,c
   643  000BF4  EF7C  F006         	goto	l58
   644  000BF8                     l1695:
   645  000BF8  0E00               	movlw	0
   646  000BFA  6E10               	movwf	(get_Num@num+1)^0,c
   647  000BFC  0E01               	movlw	1
   648  000BFE  6E0F               	movwf	get_Num@num^0,c
   649  000C00  EF7C  F006         	goto	l58
   650  000C04                     l1697:
   651  000C04  0E00               	movlw	0
   652  000C06  6E10               	movwf	(get_Num@num+1)^0,c
   653  000C08  0E02               	movlw	2
   654  000C0A  6E0F               	movwf	get_Num@num^0,c
   655  000C0C  EF7C  F006         	goto	l58
   656  000C10                     l1699:
   657  000C10  0E00               	movlw	0
   658  000C12  6E10               	movwf	(get_Num@num+1)^0,c
   659  000C14  0E03               	movlw	3
   660  000C16  6E0F               	movwf	get_Num@num^0,c
   661  000C18  EF7C  F006         	goto	l58
   662  000C1C                     l1701:
   663  000C1C  0E00               	movlw	0
   664  000C1E  6E10               	movwf	(get_Num@num+1)^0,c
   665  000C20  0E04               	movlw	4
   666  000C22  6E0F               	movwf	get_Num@num^0,c
   667  000C24  EF7C  F006         	goto	l58
   668  000C28                     l1703:
   669  000C28  0E00               	movlw	0
   670  000C2A  6E10               	movwf	(get_Num@num+1)^0,c
   671  000C2C  0E05               	movlw	5
   672  000C2E  6E0F               	movwf	get_Num@num^0,c
   673  000C30  EF7C  F006         	goto	l58
   674  000C34                     l1705:
   675  000C34  0E00               	movlw	0
   676  000C36  6E10               	movwf	(get_Num@num+1)^0,c
   677  000C38  0E06               	movlw	6
   678  000C3A  6E0F               	movwf	get_Num@num^0,c
   679  000C3C  EF7C  F006         	goto	l58
   680  000C40                     l1707:
   681  000C40  0E00               	movlw	0
   682  000C42  6E10               	movwf	(get_Num@num+1)^0,c
   683  000C44  0E07               	movlw	7
   684  000C46  6E0F               	movwf	get_Num@num^0,c
   685  000C48  EF7C  F006         	goto	l58
   686  000C4C                     l1709:
   687  000C4C  0E00               	movlw	0
   688  000C4E  6E10               	movwf	(get_Num@num+1)^0,c
   689  000C50  0E08               	movlw	8
   690  000C52  6E0F               	movwf	get_Num@num^0,c
   691  000C54  EF7C  F006         	goto	l58
   692  000C58                     l1711:
   693  000C58  0E00               	movlw	0
   694  000C5A  6E10               	movwf	(get_Num@num+1)^0,c
   695  000C5C  0E09               	movlw	9
   696  000C5E  6E0F               	movwf	get_Num@num^0,c
   697  000C60  EF7C  F006         	goto	l58
   698  000C64                     l1713:
   699                           
   700                           ;MainP7.c: 74:         LCD_cmd(0b00000001);
   701  000C64  0E01               	movlw	1
   702  000C66  EC2B  F008         	call	_LCD_cmd
   703  000C6A                     l1715:
   704                           
   705                           ;MainP7.c: 75:         num = 13;
   706  000C6A  0E00               	movlw	0
   707  000C6C  6E10               	movwf	(get_Num@num+1)^0,c
   708  000C6E  0E0D               	movlw	13
   709  000C70  6E0F               	movwf	get_Num@num^0,c
   710                           
   711                           ;MainP7.c: 76:         break;
   712  000C72  EF7C  F006         	goto	l58
   713  000C76                     l1717:
   714                           
   715                           ;MainP7.c: 78:         disp_Error(0);
   716  000C76  0E00               	movlw	0
   717  000C78  6E07               	movwf	(disp_Error@numb+1)^0,c
   718  000C7A  0E00               	movlw	0
   719  000C7C  6E06               	movwf	disp_Error@numb^0,c
   720  000C7E  EC8B  F007         	call	_disp_Error	;wreg free
   721  000C82  EF35  F006         	goto	l1715
   722  000C86                     l1723:
   723  000C86  500E               	movf	get_Num@ch^0,w,c
   724  000C88  6E0C               	movwf	??_get_Num^0,c
   725  000C8A  6A0D               	clrf	(??_get_Num+1)^0,c
   726                           
   727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   728                           ; Switch size 1, requested type "simple"
   729                           ; Number of cases is 1, Range of values is 0 to 0
   730                           ; switch strategies available:
   731                           ; Name         Instructions Cycles
   732                           ; simple_byte            4     3 (average)
   733                           ;	Chosen strategy is simple_byte
   734  000C8C  500D               	movf	(??_get_Num+1)^0,w,c
   735  000C8E  0A00               	xorlw	0	; case 0
   736  000C90  B4D8               	btfsc	status,2,c
   737  000C92  EF4D  F006         	goto	l1991
   738  000C96  EF3B  F006         	goto	l1717
   739  000C9A                     l1991:
   740                           
   741                           ; Switch size 1, requested type "simple"
   742                           ; Number of cases is 11, Range of values is 48 to 67
   743                           ; switch strategies available:
   744                           ; Name         Instructions Cycles
   745                           ; simple_byte           34    18 (average)
   746                           ;	Chosen strategy is simple_byte
   747  000C9A  500C               	movf	??_get_Num^0,w,c
   748  000C9C  0A30               	xorlw	48	; case 48
   749  000C9E  B4D8               	btfsc	status,2,c
   750  000CA0  EFF6  F005         	goto	l1693
   751  000CA4  0A01               	xorlw	1	; case 49
   752  000CA6  B4D8               	btfsc	status,2,c
   753  000CA8  EFFC  F005         	goto	l1695
   754  000CAC  0A03               	xorlw	3	; case 50
   755  000CAE  B4D8               	btfsc	status,2,c
   756  000CB0  EF02  F006         	goto	l1697
   757  000CB4  0A01               	xorlw	1	; case 51
   758  000CB6  B4D8               	btfsc	status,2,c
   759  000CB8  EF08  F006         	goto	l1699
   760  000CBC  0A07               	xorlw	7	; case 52
   761  000CBE  B4D8               	btfsc	status,2,c
   762  000CC0  EF0E  F006         	goto	l1701
   763  000CC4  0A01               	xorlw	1	; case 53
   764  000CC6  B4D8               	btfsc	status,2,c
   765  000CC8  EF14  F006         	goto	l1703
   766  000CCC  0A03               	xorlw	3	; case 54
   767  000CCE  B4D8               	btfsc	status,2,c
   768  000CD0  EF1A  F006         	goto	l1705
   769  000CD4  0A01               	xorlw	1	; case 55
   770  000CD6  B4D8               	btfsc	status,2,c
   771  000CD8  EF20  F006         	goto	l1707
   772  000CDC  0A0F               	xorlw	15	; case 56
   773  000CDE  B4D8               	btfsc	status,2,c
   774  000CE0  EF26  F006         	goto	l1709
   775  000CE4  0A01               	xorlw	1	; case 57
   776  000CE6  B4D8               	btfsc	status,2,c
   777  000CE8  EF2C  F006         	goto	l1711
   778  000CEC  0A7A               	xorlw	122	; case 67
   779  000CEE  B4D8               	btfsc	status,2,c
   780  000CF0  EF32  F006         	goto	l1713
   781  000CF4  EF3B  F006         	goto	l1717
   782  000CF8                     l58:
   783                           
   784                           ;MainP7.c: 82:     return num;
   785  000CF8  C00F  F00A         	movff	get_Num@num,?_get_Num
   786  000CFC  C010  F00B         	movff	get_Num@num+1,?_get_Num+1
   787  000D00  0012               	return		;funcret
   788  000D02                     __end_of_get_Num:
   789                           	callstack 0
   790                           
   791 ;; *************** function _get_Key *****************
   792 ;; Defined at:
   793 ;;		line 51 in file "../4x4_kbd_Driver.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      unsigned char 
   800 ;; Registers used:
   801 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   807 ;;      Params:         0       0       0       0       0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0
   809 ;;      Temps:          2       0       0       0       0       0       0       0       0
   810 ;;      Totals:         2       0       0       0       0       0       0       0       0
   811 ;;Total ram usage:        2 bytes
   812 ;; Hardware stack levels used: 1
   813 ;; Hardware stack levels required when called: 1
   814 ;; This function calls:
   815 ;;		_kbd_scanner
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text3
   822  000F7E                     __ptext3:
   823                           	callstack 0
   824  000F7E                     _get_Key:
   825                           	callstack 29
   826  000F7E                     
   827                           ;../4x4_kbd_Driver.c: 52:     key = 'x';
   828  000F7E  0E78               	movlw	120
   829  000F80  6E1A               	movwf	_key^0,c
   830                           
   831                           ;../4x4_kbd_Driver.c: 53:     while (key == 'x'){
   832  000F82  EFD2  F007         	goto	l1685
   833  000F86                     l1681:
   834                           
   835                           ;../4x4_kbd_Driver.c: 54:         key = kbd_scanner();
   836  000F86  EC11  F004         	call	_kbd_scanner	;wreg free
   837  000F8A  6E1A               	movwf	_key^0,c
   838  000F8C                     
   839                           ;../4x4_kbd_Driver.c: 55:         _delay((unsigned long)((100)*(8000000/4000.0)));
   840  000F8C  0E02               	movlw	2
   841  000F8E  6E04               	movwf	(??_get_Key+1)^0,c
   842  000F90  0E04               	movlw	4
   843  000F92  6E03               	movwf	??_get_Key^0,c
   844  000F94  0EBA               	movlw	186
   845  000F96                     u417:
   846  000F96  2EE8               	decfsz	wreg,f,c
   847  000F98  D7FE               	bra	u417
   848  000F9A  2E03               	decfsz	??_get_Key^0,f,c
   849  000F9C  D7FC               	bra	u417
   850  000F9E  2E04               	decfsz	(??_get_Key+1)^0,f,c
   851  000FA0  D7FA               	bra	u417
   852  000FA2  D000               	nop2	
   853  000FA4                     l1685:
   854                           
   855                           ;../4x4_kbd_Driver.c: 53:     while (key == 'x'){
   856  000FA4  0E78               	movlw	120
   857  000FA6  181A               	xorwf	_key^0,w,c
   858  000FA8  B4D8               	btfsc	status,2,c
   859  000FAA  EFD9  F007         	goto	u281
   860  000FAE  EFDB  F007         	goto	u280
   861  000FB2                     u281:
   862  000FB2  EFC3  F007         	goto	l1681
   863  000FB6                     u280:
   864  000FB6                     
   865                           ;../4x4_kbd_Driver.c: 57:     return key;
   866  000FB6  501A               	movf	_key^0,w,c
   867  000FB8  0012               	return		;funcret
   868  000FBA                     __end_of_get_Key:
   869                           	callstack 0
   870                           
   871 ;; *************** function _kbd_scanner *****************
   872 ;; Defined at:
   873 ;;		line 18 in file "../4x4_kbd_Driver.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      unsigned char 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   887 ;;      Params:         0       0       0       0       0       0       0       0       0
   888 ;;      Locals:         0       0       0       0       0       0       0       0       0
   889 ;;      Temps:          2       0       0       0       0       0       0       0       0
   890 ;;      Totals:         2       0       0       0       0       0       0       0       0
   891 ;;Total ram usage:        2 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		_get_Key
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text4
   901  000822                     __ptext4:
   902                           	callstack 0
   903  000822                     _kbd_scanner:
   904                           	callstack 29
   905  000822                     
   906                           ;../4x4_kbd_Driver.c: 19:     LATB = 0xE0;
   907  000822  0EE0               	movlw	224
   908  000824  6E8A               	movwf	138,c	;volatile
   909                           
   910                           ;../4x4_kbd_Driver.c: 20:     switch (PORTB){
   911  000826  EF35  F004         	goto	l1491
   912  00082A                     l1465:
   913  00082A  0E01               	movlw	low _kbdMatrix
   914  00082C  6EF6               	movwf	tblptrl,c
   915  00082E                     	if	1	;There is more than 1 active tblptr byte
   916  00082E  0E08               	movlw	high _kbdMatrix
   917  000830  6EF7               	movwf	tblptrh,c
   918  000832                     	endif
   919  000832                     	if	0	;There are less than 3 active tblptr bytes
   920  000832                     	endif
   921  000832  0008               	tblrd		*
   922  000834  50F5               	movf	tablat,w,c
   923  000836  EF18  F005         	goto	l114
   924  00083A                     l1471:
   925  00083A  0E02               	movlw	low (_kbdMatrix+1)
   926  00083C  6EF6               	movwf	tblptrl,c
   927  00083E  0E08               	movlw	high (_kbdMatrix+1)
   928  000840  6EF7               	movwf	tblptrh,c
   929  000842                     	if	0	;tblptru may be non-zero
   930  000842                     	endif
   931  000842                     	if	0	;tblptru may be non-zero
   932  000842                     	endif
   933  000842  0008               	tblrd		*
   934  000844  50F5               	movf	tablat,w,c
   935  000846  EF18  F005         	goto	l114
   936  00084A                     l1477:
   937  00084A  0E03               	movlw	low (_kbdMatrix+2)
   938  00084C  6EF6               	movwf	tblptrl,c
   939  00084E  0E08               	movlw	high (_kbdMatrix+2)
   940  000850  6EF7               	movwf	tblptrh,c
   941  000852                     	if	0	;tblptru may be non-zero
   942  000852                     	endif
   943  000852                     	if	0	;tblptru may be non-zero
   944  000852                     	endif
   945  000852  0008               	tblrd		*
   946  000854  50F5               	movf	tablat,w,c
   947  000856  EF18  F005         	goto	l114
   948  00085A                     l1483:
   949  00085A  0E04               	movlw	low (_kbdMatrix+3)
   950  00085C  6EF6               	movwf	tblptrl,c
   951  00085E  0E08               	movlw	high (_kbdMatrix+3)
   952  000860  6EF7               	movwf	tblptrh,c
   953  000862                     	if	0	;tblptru may be non-zero
   954  000862                     	endif
   955  000862                     	if	0	;tblptru may be non-zero
   956  000862                     	endif
   957  000862  0008               	tblrd		*
   958  000864  50F5               	movf	tablat,w,c
   959  000866  EF18  F005         	goto	l114
   960  00086A                     l1491:
   961  00086A  5081               	movf	129,w,c	;volatile
   962  00086C  6E01               	movwf	??_kbd_scanner^0,c
   963  00086E  6A02               	clrf	(??_kbd_scanner+1)^0,c
   964                           
   965                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   966                           ; Switch size 1, requested type "simple"
   967                           ; Number of cases is 1, Range of values is 0 to 0
   968                           ; switch strategies available:
   969                           ; Name         Instructions Cycles
   970                           ; simple_byte            4     3 (average)
   971                           ;	Chosen strategy is simple_byte
   972  000870  5002               	movf	(??_kbd_scanner+1)^0,w,c
   973  000872  0A00               	xorlw	0	; case 0
   974  000874  B4D8               	btfsc	status,2,c
   975  000876  EF3F  F004         	goto	l1993
   976  00087A  EF52  F004         	goto	l1493
   977  00087E                     l1993:
   978                           
   979                           ; Switch size 1, requested type "simple"
   980                           ; Number of cases is 4, Range of values is 231 to 238
   981                           ; switch strategies available:
   982                           ; Name         Instructions Cycles
   983                           ; simple_byte           13     7 (average)
   984                           ;	Chosen strategy is simple_byte
   985  00087E  5001               	movf	??_kbd_scanner^0,w,c
   986  000880  0AE7               	xorlw	231	; case 231
   987  000882  B4D8               	btfsc	status,2,c
   988  000884  EF2D  F004         	goto	l1483
   989  000888  0A0C               	xorlw	12	; case 235
   990  00088A  B4D8               	btfsc	status,2,c
   991  00088C  EF25  F004         	goto	l1477
   992  000890  0A06               	xorlw	6	; case 237
   993  000892  B4D8               	btfsc	status,2,c
   994  000894  EF1D  F004         	goto	l1471
   995  000898  0A03               	xorlw	3	; case 238
   996  00089A  B4D8               	btfsc	status,2,c
   997  00089C  EF15  F004         	goto	l1465
   998  0008A0  EF52  F004         	goto	l1493
   999  0008A4                     l1493:
  1000                           
  1001                           ;../4x4_kbd_Driver.c: 26:     LATB = 0xD0;
  1002  0008A4  0ED0               	movlw	208
  1003  0008A6  6E8A               	movwf	138,c	;volatile
  1004                           
  1005                           ;../4x4_kbd_Driver.c: 27:     switch (PORTB){
  1006  0008A8  EF76  F004         	goto	l1521
  1007  0008AC                     l1495:
  1008  0008AC  0E05               	movlw	low (_kbdMatrix+4)
  1009  0008AE  6EF6               	movwf	tblptrl,c
  1010  0008B0  0E08               	movlw	high (_kbdMatrix+4)
  1011  0008B2  6EF7               	movwf	tblptrh,c
  1012  0008B4                     	if	0	;tblptru may be non-zero
  1013  0008B4                     	endif
  1014  0008B4                     	if	0	;tblptru may be non-zero
  1015  0008B4                     	endif
  1016  0008B4  0008               	tblrd		*
  1017  0008B6  50F5               	movf	tablat,w,c
  1018  0008B8  EF18  F005         	goto	l114
  1019  0008BC                     l1501:
  1020  0008BC  0E06               	movlw	low (_kbdMatrix+5)
  1021  0008BE  6EF6               	movwf	tblptrl,c
  1022  0008C0  0E08               	movlw	high (_kbdMatrix+5)
  1023  0008C2  6EF7               	movwf	tblptrh,c
  1024  0008C4                     	if	0	;tblptru may be non-zero
  1025  0008C4                     	endif
  1026  0008C4                     	if	0	;tblptru may be non-zero
  1027  0008C4                     	endif
  1028  0008C4  0008               	tblrd		*
  1029  0008C6  50F5               	movf	tablat,w,c
  1030  0008C8  EF18  F005         	goto	l114
  1031  0008CC                     l1507:
  1032  0008CC  0E07               	movlw	low (_kbdMatrix+6)
  1033  0008CE  6EF6               	movwf	tblptrl,c
  1034  0008D0  0E08               	movlw	high (_kbdMatrix+6)
  1035  0008D2  6EF7               	movwf	tblptrh,c
  1036  0008D4                     	if	0	;tblptru may be non-zero
  1037  0008D4                     	endif
  1038  0008D4                     	if	0	;tblptru may be non-zero
  1039  0008D4                     	endif
  1040  0008D4  0008               	tblrd		*
  1041  0008D6  50F5               	movf	tablat,w,c
  1042  0008D8  EF18  F005         	goto	l114
  1043  0008DC                     l1513:
  1044  0008DC  0E08               	movlw	low (_kbdMatrix+7)
  1045  0008DE  6EF6               	movwf	tblptrl,c
  1046  0008E0  0E08               	movlw	high (_kbdMatrix+7)
  1047  0008E2  6EF7               	movwf	tblptrh,c
  1048  0008E4                     	if	0	;tblptru may be non-zero
  1049  0008E4                     	endif
  1050  0008E4                     	if	0	;tblptru may be non-zero
  1051  0008E4                     	endif
  1052  0008E4  0008               	tblrd		*
  1053  0008E6  50F5               	movf	tablat,w,c
  1054  0008E8  EF18  F005         	goto	l114
  1055  0008EC                     l1521:
  1056  0008EC  5081               	movf	129,w,c	;volatile
  1057  0008EE  6E01               	movwf	??_kbd_scanner^0,c
  1058  0008F0  6A02               	clrf	(??_kbd_scanner+1)^0,c
  1059                           
  1060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1061                           ; Switch size 1, requested type "simple"
  1062                           ; Number of cases is 1, Range of values is 0 to 0
  1063                           ; switch strategies available:
  1064                           ; Name         Instructions Cycles
  1065                           ; simple_byte            4     3 (average)
  1066                           ;	Chosen strategy is simple_byte
  1067  0008F2  5002               	movf	(??_kbd_scanner+1)^0,w,c
  1068  0008F4  0A00               	xorlw	0	; case 0
  1069  0008F6  B4D8               	btfsc	status,2,c
  1070  0008F8  EF80  F004         	goto	l1995
  1071  0008FC  EF93  F004         	goto	l1523
  1072  000900                     l1995:
  1073                           
  1074                           ; Switch size 1, requested type "simple"
  1075                           ; Number of cases is 4, Range of values is 215 to 222
  1076                           ; switch strategies available:
  1077                           ; Name         Instructions Cycles
  1078                           ; simple_byte           13     7 (average)
  1079                           ;	Chosen strategy is simple_byte
  1080  000900  5001               	movf	??_kbd_scanner^0,w,c
  1081  000902  0AD7               	xorlw	215	; case 215
  1082  000904  B4D8               	btfsc	status,2,c
  1083  000906  EF6E  F004         	goto	l1513
  1084  00090A  0A0C               	xorlw	12	; case 219
  1085  00090C  B4D8               	btfsc	status,2,c
  1086  00090E  EF66  F004         	goto	l1507
  1087  000912  0A06               	xorlw	6	; case 221
  1088  000914  B4D8               	btfsc	status,2,c
  1089  000916  EF5E  F004         	goto	l1501
  1090  00091A  0A03               	xorlw	3	; case 222
  1091  00091C  B4D8               	btfsc	status,2,c
  1092  00091E  EF56  F004         	goto	l1495
  1093  000922  EF93  F004         	goto	l1523
  1094  000926                     l1523:
  1095                           
  1096                           ;../4x4_kbd_Driver.c: 33:     LATB = 0xB0;
  1097  000926  0EB0               	movlw	176
  1098  000928  6E8A               	movwf	138,c	;volatile
  1099                           
  1100                           ;../4x4_kbd_Driver.c: 34:     switch (PORTB){
  1101  00092A  EFB7  F004         	goto	l1551
  1102  00092E                     l1525:
  1103  00092E  0E09               	movlw	low (_kbdMatrix+8)
  1104  000930  6EF6               	movwf	tblptrl,c
  1105  000932  0E08               	movlw	high (_kbdMatrix+8)
  1106  000934  6EF7               	movwf	tblptrh,c
  1107  000936                     	if	0	;tblptru may be non-zero
  1108  000936                     	endif
  1109  000936                     	if	0	;tblptru may be non-zero
  1110  000936                     	endif
  1111  000936  0008               	tblrd		*
  1112  000938  50F5               	movf	tablat,w,c
  1113  00093A  EF18  F005         	goto	l114
  1114  00093E                     l1531:
  1115  00093E  0E0A               	movlw	low (_kbdMatrix+9)
  1116  000940  6EF6               	movwf	tblptrl,c
  1117  000942  0E08               	movlw	high (_kbdMatrix+9)
  1118  000944  6EF7               	movwf	tblptrh,c
  1119  000946                     	if	0	;tblptru may be non-zero
  1120  000946                     	endif
  1121  000946                     	if	0	;tblptru may be non-zero
  1122  000946                     	endif
  1123  000946  0008               	tblrd		*
  1124  000948  50F5               	movf	tablat,w,c
  1125  00094A  EF18  F005         	goto	l114
  1126  00094E                     l1537:
  1127  00094E  0E0B               	movlw	low (_kbdMatrix+10)
  1128  000950  6EF6               	movwf	tblptrl,c
  1129  000952  0E08               	movlw	high (_kbdMatrix+10)
  1130  000954  6EF7               	movwf	tblptrh,c
  1131  000956                     	if	0	;tblptru may be non-zero
  1132  000956                     	endif
  1133  000956                     	if	0	;tblptru may be non-zero
  1134  000956                     	endif
  1135  000956  0008               	tblrd		*
  1136  000958  50F5               	movf	tablat,w,c
  1137  00095A  EF18  F005         	goto	l114
  1138  00095E                     l1543:
  1139  00095E  0E0C               	movlw	low (_kbdMatrix+11)
  1140  000960  6EF6               	movwf	tblptrl,c
  1141  000962  0E08               	movlw	high (_kbdMatrix+11)
  1142  000964  6EF7               	movwf	tblptrh,c
  1143  000966                     	if	0	;tblptru may be non-zero
  1144  000966                     	endif
  1145  000966                     	if	0	;tblptru may be non-zero
  1146  000966                     	endif
  1147  000966  0008               	tblrd		*
  1148  000968  50F5               	movf	tablat,w,c
  1149  00096A  EF18  F005         	goto	l114
  1150  00096E                     l1551:
  1151  00096E  5081               	movf	129,w,c	;volatile
  1152  000970  6E01               	movwf	??_kbd_scanner^0,c
  1153  000972  6A02               	clrf	(??_kbd_scanner+1)^0,c
  1154                           
  1155                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1156                           ; Switch size 1, requested type "simple"
  1157                           ; Number of cases is 1, Range of values is 0 to 0
  1158                           ; switch strategies available:
  1159                           ; Name         Instructions Cycles
  1160                           ; simple_byte            4     3 (average)
  1161                           ;	Chosen strategy is simple_byte
  1162  000974  5002               	movf	(??_kbd_scanner+1)^0,w,c
  1163  000976  0A00               	xorlw	0	; case 0
  1164  000978  B4D8               	btfsc	status,2,c
  1165  00097A  EFC1  F004         	goto	l1997
  1166  00097E  EFD4  F004         	goto	l1553
  1167  000982                     l1997:
  1168                           
  1169                           ; Switch size 1, requested type "simple"
  1170                           ; Number of cases is 4, Range of values is 183 to 190
  1171                           ; switch strategies available:
  1172                           ; Name         Instructions Cycles
  1173                           ; simple_byte           13     7 (average)
  1174                           ;	Chosen strategy is simple_byte
  1175  000982  5001               	movf	??_kbd_scanner^0,w,c
  1176  000984  0AB7               	xorlw	183	; case 183
  1177  000986  B4D8               	btfsc	status,2,c
  1178  000988  EFAF  F004         	goto	l1543
  1179  00098C  0A0C               	xorlw	12	; case 187
  1180  00098E  B4D8               	btfsc	status,2,c
  1181  000990  EFA7  F004         	goto	l1537
  1182  000994  0A06               	xorlw	6	; case 189
  1183  000996  B4D8               	btfsc	status,2,c
  1184  000998  EF9F  F004         	goto	l1531
  1185  00099C  0A03               	xorlw	3	; case 190
  1186  00099E  B4D8               	btfsc	status,2,c
  1187  0009A0  EF97  F004         	goto	l1525
  1188  0009A4  EFD4  F004         	goto	l1553
  1189  0009A8                     l1553:
  1190                           
  1191                           ;../4x4_kbd_Driver.c: 40:     LATB = 0x70;
  1192  0009A8  0E70               	movlw	112
  1193  0009AA  6E8A               	movwf	138,c	;volatile
  1194                           
  1195                           ;../4x4_kbd_Driver.c: 41:     switch (PORTB){
  1196  0009AC  EFF8  F004         	goto	l1581
  1197  0009B0                     l1555:
  1198  0009B0  0E0D               	movlw	low (_kbdMatrix+12)
  1199  0009B2  6EF6               	movwf	tblptrl,c
  1200  0009B4  0E08               	movlw	high (_kbdMatrix+12)
  1201  0009B6  6EF7               	movwf	tblptrh,c
  1202  0009B8                     	if	0	;tblptru may be non-zero
  1203  0009B8                     	endif
  1204  0009B8                     	if	0	;tblptru may be non-zero
  1205  0009B8                     	endif
  1206  0009B8  0008               	tblrd		*
  1207  0009BA  50F5               	movf	tablat,w,c
  1208  0009BC  EF18  F005         	goto	l114
  1209  0009C0                     l1561:
  1210  0009C0  0E0E               	movlw	low (_kbdMatrix+13)
  1211  0009C2  6EF6               	movwf	tblptrl,c
  1212  0009C4  0E08               	movlw	high (_kbdMatrix+13)
  1213  0009C6  6EF7               	movwf	tblptrh,c
  1214  0009C8                     	if	0	;tblptru may be non-zero
  1215  0009C8                     	endif
  1216  0009C8                     	if	0	;tblptru may be non-zero
  1217  0009C8                     	endif
  1218  0009C8  0008               	tblrd		*
  1219  0009CA  50F5               	movf	tablat,w,c
  1220  0009CC  EF18  F005         	goto	l114
  1221  0009D0                     l1567:
  1222  0009D0  0E0F               	movlw	low (_kbdMatrix+14)
  1223  0009D2  6EF6               	movwf	tblptrl,c
  1224  0009D4  0E08               	movlw	high (_kbdMatrix+14)
  1225  0009D6  6EF7               	movwf	tblptrh,c
  1226  0009D8                     	if	0	;tblptru may be non-zero
  1227  0009D8                     	endif
  1228  0009D8                     	if	0	;tblptru may be non-zero
  1229  0009D8                     	endif
  1230  0009D8  0008               	tblrd		*
  1231  0009DA  50F5               	movf	tablat,w,c
  1232  0009DC  EF18  F005         	goto	l114
  1233  0009E0                     l1573:
  1234  0009E0  0E10               	movlw	low (_kbdMatrix+15)
  1235  0009E2  6EF6               	movwf	tblptrl,c
  1236  0009E4  0E08               	movlw	high (_kbdMatrix+15)
  1237  0009E6  6EF7               	movwf	tblptrh,c
  1238  0009E8                     	if	0	;tblptru may be non-zero
  1239  0009E8                     	endif
  1240  0009E8                     	if	0	;tblptru may be non-zero
  1241  0009E8                     	endif
  1242  0009E8  0008               	tblrd		*
  1243  0009EA  50F5               	movf	tablat,w,c
  1244  0009EC  EF18  F005         	goto	l114
  1245  0009F0                     l1581:
  1246  0009F0  5081               	movf	129,w,c	;volatile
  1247  0009F2  6E01               	movwf	??_kbd_scanner^0,c
  1248  0009F4  6A02               	clrf	(??_kbd_scanner+1)^0,c
  1249                           
  1250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1251                           ; Switch size 1, requested type "simple"
  1252                           ; Number of cases is 1, Range of values is 0 to 0
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte            4     3 (average)
  1256                           ;	Chosen strategy is simple_byte
  1257  0009F6  5002               	movf	(??_kbd_scanner+1)^0,w,c
  1258  0009F8  0A00               	xorlw	0	; case 0
  1259  0009FA  B4D8               	btfsc	status,2,c
  1260  0009FC  EF02  F005         	goto	l1999
  1261  000A00  EF15  F005         	goto	l1583
  1262  000A04                     l1999:
  1263                           
  1264                           ; Switch size 1, requested type "simple"
  1265                           ; Number of cases is 4, Range of values is 119 to 126
  1266                           ; switch strategies available:
  1267                           ; Name         Instructions Cycles
  1268                           ; simple_byte           13     7 (average)
  1269                           ;	Chosen strategy is simple_byte
  1270  000A04  5001               	movf	??_kbd_scanner^0,w,c
  1271  000A06  0A77               	xorlw	119	; case 119
  1272  000A08  B4D8               	btfsc	status,2,c
  1273  000A0A  EFF0  F004         	goto	l1573
  1274  000A0E  0A0C               	xorlw	12	; case 123
  1275  000A10  B4D8               	btfsc	status,2,c
  1276  000A12  EFE8  F004         	goto	l1567
  1277  000A16  0A06               	xorlw	6	; case 125
  1278  000A18  B4D8               	btfsc	status,2,c
  1279  000A1A  EFE0  F004         	goto	l1561
  1280  000A1E  0A03               	xorlw	3	; case 126
  1281  000A20  B4D8               	btfsc	status,2,c
  1282  000A22  EFD8  F004         	goto	l1555
  1283  000A26  EF15  F005         	goto	l1583
  1284  000A2A                     l1583:
  1285                           
  1286                           ;../4x4_kbd_Driver.c: 47:     LATB = 0x00;
  1287  000A2A  0E00               	movlw	0
  1288  000A2C  6E8A               	movwf	138,c	;volatile
  1289  000A2E                     
  1290                           ;../4x4_kbd_Driver.c: 48:     return 'x';
  1291  000A2E  0E78               	movlw	120
  1292  000A30                     l114:
  1293  000A30  0012               	return		;funcret
  1294  000A32                     __end_of_kbd_scanner:
  1295                           	callstack 0
  1296                           
  1297 ;; *************** function _get_Func *****************
  1298 ;; Defined at:
  1299 ;;		line 85 in file "MainP7.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  chf             1    wreg     unsigned char 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  chf             1    9[COMRAM] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      unsigned char 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0
  1314 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1316 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1317 ;;Total ram usage:        1 bytes
  1318 ;; Hardware stack levels used: 1
  1319 ;; Hardware stack levels required when called: 3
  1320 ;; This function calls:
  1321 ;;		_LCD_cmd
  1322 ;;		_disp_Error
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text5
  1329  000DC6                     __ptext5:
  1330                           	callstack 0
  1331  000DC6                     _get_Func:
  1332                           	callstack 27
  1333                           
  1334                           ;incstack = 0
  1335                           ;get_Func@chf stored from wreg
  1336  000DC6  6E0A               	movwf	get_Func@chf^0,c
  1337  000DC8                     
  1338                           ;MainP7.c: 86:     if(chf=='C'){
  1339  000DC8  0E43               	movlw	67
  1340  000DCA  180A               	xorwf	get_Func@chf^0,w,c
  1341  000DCC  A4D8               	btfss	status,2,c
  1342  000DCE  EFEB  F006         	goto	u291
  1343  000DD2  EFED  F006         	goto	u290
  1344  000DD6                     u291:
  1345  000DD6  EFF3  F006         	goto	l1737
  1346  000DDA                     u290:
  1347  000DDA                     
  1348                           ;MainP7.c: 87:         LCD_cmd(0b00000001);
  1349  000DDA  0E01               	movlw	1
  1350  000DDC  EC2B  F008         	call	_LCD_cmd
  1351  000DE0                     l1733:
  1352                           
  1353                           ;MainP7.c: 88:         return 'e';
  1354  000DE0  0E65               	movlw	101
  1355  000DE2  EF20  F007         	goto	l74
  1356  000DE6                     l1737:
  1357                           
  1358                           ;MainP7.c: 90:     if( chf!='+' && chf!='-' && chf!='*' && chf!='/' ){
  1359  000DE6  0E2B               	movlw	43
  1360  000DE8  180A               	xorwf	get_Func@chf^0,w,c
  1361  000DEA  B4D8               	btfsc	status,2,c
  1362  000DEC  EFFA  F006         	goto	u301
  1363  000DF0  EFFC  F006         	goto	u300
  1364  000DF4                     u301:
  1365  000DF4  EF1F  F007         	goto	l1751
  1366  000DF8                     u300:
  1367  000DF8  0E2D               	movlw	45
  1368  000DFA  180A               	xorwf	get_Func@chf^0,w,c
  1369  000DFC  B4D8               	btfsc	status,2,c
  1370  000DFE  EF03  F007         	goto	u311
  1371  000E02  EF05  F007         	goto	u310
  1372  000E06                     u311:
  1373  000E06  EF1F  F007         	goto	l1751
  1374  000E0A                     u310:
  1375  000E0A  0E2A               	movlw	42
  1376  000E0C  180A               	xorwf	get_Func@chf^0,w,c
  1377  000E0E  B4D8               	btfsc	status,2,c
  1378  000E10  EF0C  F007         	goto	u321
  1379  000E14  EF0E  F007         	goto	u320
  1380  000E18                     u321:
  1381  000E18  EF1F  F007         	goto	l1751
  1382  000E1C                     u320:
  1383  000E1C  0E2F               	movlw	47
  1384  000E1E  180A               	xorwf	get_Func@chf^0,w,c
  1385  000E20  B4D8               	btfsc	status,2,c
  1386  000E22  EF15  F007         	goto	u331
  1387  000E26  EF17  F007         	goto	u330
  1388  000E2A                     u331:
  1389  000E2A  EF1F  F007         	goto	l1751
  1390  000E2E                     u330:
  1391  000E2E                     
  1392                           ;MainP7.c: 91:         disp_Error(1);
  1393  000E2E  0E00               	movlw	0
  1394  000E30  6E07               	movwf	(disp_Error@numb+1)^0,c
  1395  000E32  0E01               	movlw	1
  1396  000E34  6E06               	movwf	disp_Error@numb^0,c
  1397  000E36  EC8B  F007         	call	_disp_Error	;wreg free
  1398  000E3A  EFF0  F006         	goto	l1733
  1399  000E3E                     l1751:
  1400                           
  1401                           ;MainP7.c: 94:     return chf;
  1402  000E3E  500A               	movf	get_Func@chf^0,w,c
  1403  000E40                     l74:
  1404  000E40  0012               	return		;funcret
  1405  000E42                     __end_of_get_Func:
  1406                           	callstack 0
  1407                           
  1408 ;; *************** function _disp_Error *****************
  1409 ;; Defined at:
  1410 ;;		line 111 in file "MainP7.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  numb            2    5[COMRAM] int 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1424 ;;      Params:         2       0       0       0       0       0       0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1426 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1427 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1428 ;;Total ram usage:        4 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 2
  1431 ;; This function calls:
  1432 ;;		_LCD_cmd
  1433 ;;		_write_string_LCD
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;;		_get_Num
  1437 ;;		_get_Func
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text6
  1442  000F16                     __ptext6:
  1443                           	callstack 0
  1444  000F16                     _disp_Error:
  1445                           	callstack 27
  1446  000F16                     
  1447                           ;MainP7.c: 112:     LCD_cmd(0b00000001);
  1448  000F16  0E01               	movlw	1
  1449  000F18  EC2B  F008         	call	_LCD_cmd
  1450                           
  1451                           ;MainP7.c: 113:     switch(numb){
  1452  000F1C  EFA8  F007         	goto	l1457
  1453  000F20                     l1449:
  1454  000F20  0E11               	movlw	low STR_2
  1455  000F22  6E04               	movwf	write_string_LCD@s^0,c
  1456  000F24  0E08               	movlw	high STR_2
  1457  000F26  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1458  000F28  ECDD  F007         	call	_write_string_LCD	;wreg free
  1459  000F2C  EFBE  F007         	goto	l88
  1460  000F30                     l1451:
  1461  000F30  0E11               	movlw	low STR_2
  1462  000F32  6E04               	movwf	write_string_LCD@s^0,c
  1463  000F34  0E08               	movlw	high STR_2
  1464  000F36  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1465  000F38  ECDD  F007         	call	_write_string_LCD	;wreg free
  1466  000F3C  EFBE  F007         	goto	l88
  1467  000F40                     l1453:
  1468  000F40  0E11               	movlw	low STR_2
  1469  000F42  6E04               	movwf	write_string_LCD@s^0,c
  1470  000F44  0E08               	movlw	high STR_2
  1471  000F46  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1472  000F48  ECDD  F007         	call	_write_string_LCD	;wreg free
  1473  000F4C  EFBE  F007         	goto	l88
  1474  000F50                     l1457:
  1475  000F50  C006  F008         	movff	disp_Error@numb,??_disp_Error
  1476  000F54  C007  F009         	movff	disp_Error@numb+1,??_disp_Error+1
  1477                           
  1478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1479                           ; Switch size 1, requested type "simple"
  1480                           ; Number of cases is 1, Range of values is 0 to 0
  1481                           ; switch strategies available:
  1482                           ; Name         Instructions Cycles
  1483                           ; simple_byte            4     3 (average)
  1484                           ;	Chosen strategy is simple_byte
  1485  000F58  5009               	movf	(??_disp_Error+1)^0,w,c
  1486  000F5A  0A00               	xorlw	0	; case 0
  1487  000F5C  B4D8               	btfsc	status,2,c
  1488  000F5E  EFB3  F007         	goto	l2001
  1489  000F62  EFA0  F007         	goto	l1453
  1490  000F66                     l2001:
  1491                           
  1492                           ; Switch size 1, requested type "simple"
  1493                           ; Number of cases is 2, Range of values is 0 to 1
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte            7     4 (average)
  1497                           ;	Chosen strategy is simple_byte
  1498  000F66  5008               	movf	??_disp_Error^0,w,c
  1499  000F68  0A00               	xorlw	0	; case 0
  1500  000F6A  B4D8               	btfsc	status,2,c
  1501  000F6C  EF90  F007         	goto	l1449
  1502  000F70  0A01               	xorlw	1	; case 1
  1503  000F72  B4D8               	btfsc	status,2,c
  1504  000F74  EF98  F007         	goto	l1451
  1505  000F78  EFA0  F007         	goto	l1453
  1506  000F7C                     l88:
  1507  000F7C  0012               	return		;funcret
  1508  000F7E                     __end_of_disp_Error:
  1509                           	callstack 0
  1510                           
  1511 ;; *************** function _disp_Res *****************
  1512 ;; Defined at:
  1513 ;;		line 97 in file "MainP7.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  numb            2    8[COMRAM] int 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  TenthDigit      1   11[COMRAM] unsigned char 
  1518 ;;  UnitDigit       1   10[COMRAM] unsigned char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1528 ;;      Params:         2       0       0       0       0       0       0       0       0
  1529 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1531 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1532 ;;Total ram usage:        4 bytes
  1533 ;; Hardware stack levels used: 1
  1534 ;; Hardware stack levels required when called: 2
  1535 ;; This function calls:
  1536 ;;		___awdiv
  1537 ;;		_send_to_LCD
  1538 ;;		_write_string_LCD
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text7
  1545  000E42                     __ptext7:
  1546                           	callstack 0
  1547  000E42                     _disp_Res:
  1548                           	callstack 28
  1549  000E42                     
  1550                           ;MainP7.c: 99:     unsigned char TenthDigit = 0;
  1551  000E42  0E00               	movlw	0
  1552  000E44  6E0C               	movwf	disp_Res@TenthDigit^0,c
  1553  000E46                     
  1554                           ;MainP7.c: 100:     if(numb < 0){
  1555  000E46  BE0A               	btfsc	(disp_Res@numb+1)^0,7,c
  1556  000E48  EF2A  F007         	goto	u340
  1557  000E4C  EF28  F007         	goto	u341
  1558  000E50                     u341:
  1559  000E50  EF34  F007         	goto	l1763
  1560  000E54                     u340:
  1561  000E54                     
  1562                           ;MainP7.c: 101:         write_string_LCD("--");
  1563  000E54  0E1D               	movlw	low STR_1
  1564  000E56  6E04               	movwf	write_string_LCD@s^0,c
  1565  000E58  0E08               	movlw	high STR_1
  1566  000E5A  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1567  000E5C  ECDD  F007         	call	_write_string_LCD	;wreg free
  1568  000E60                     
  1569                           ;MainP7.c: 102:         numb = -1*numb;
  1570  000E60  6C09               	negf	disp_Res@numb^0,c
  1571  000E62  1E0A               	comf	(disp_Res@numb+1)^0,f,c
  1572  000E64  B0D8               	btfsc	status,0,c
  1573  000E66  2A0A               	incf	(disp_Res@numb+1)^0,f,c
  1574  000E68                     l1763:
  1575                           
  1576                           ;MainP7.c: 104:     TenthDigit = (numb/10);
  1577  000E68  C009  F001         	movff	disp_Res@numb,___awdiv@dividend
  1578  000E6C  C00A  F002         	movff	disp_Res@numb+1,___awdiv@dividend+1
  1579  000E70  0E00               	movlw	0
  1580  000E72  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1581  000E74  0E0A               	movlw	10
  1582  000E76  6E03               	movwf	___awdiv@divisor^0,c
  1583  000E78  EC81  F006         	call	___awdiv	;wreg free
  1584  000E7C  5001               	movf	?___awdiv^0,w,c
  1585  000E7E  6E0C               	movwf	disp_Res@TenthDigit^0,c
  1586  000E80                     
  1587                           ;MainP7.c: 105:     if( TenthDigit != 0)
  1588  000E80  500C               	movf	disp_Res@TenthDigit^0,w,c
  1589  000E82  B4D8               	btfsc	status,2,c
  1590  000E84  EF46  F007         	goto	u351
  1591  000E88  EF48  F007         	goto	u350
  1592  000E8C                     u351:
  1593  000E8C  EF4C  F007         	goto	l1769
  1594  000E90                     u350:
  1595  000E90                     
  1596                           ;MainP7.c: 106:         send_to_LCD(TenthDigit+'0');
  1597  000E90  500C               	movf	disp_Res@TenthDigit^0,w,c
  1598  000E92  0F30               	addlw	48
  1599  000E94  ECF8  F007         	call	_send_to_LCD
  1600  000E98                     l1769:
  1601                           
  1602                           ;MainP7.c: 107:     UnitDigit = numb - TenthDigit*10;
  1603  000E98  500C               	movf	disp_Res@TenthDigit^0,w,c
  1604  000E9A  0DF6               	mullw	246
  1605  000E9C  50F3               	movf	243,w,c
  1606  000E9E  2409               	addwf	disp_Res@numb^0,w,c
  1607  000EA0  6E0B               	movwf	disp_Res@UnitDigit^0,c
  1608  000EA2                     
  1609                           ;MainP7.c: 108:     send_to_LCD(UnitDigit+'0');
  1610  000EA2  500B               	movf	disp_Res@UnitDigit^0,w,c
  1611  000EA4  0F30               	addlw	48
  1612  000EA6  ECF8  F007         	call	_send_to_LCD
  1613  000EAA  0012               	return		;funcret
  1614  000EAC                     __end_of_disp_Res:
  1615                           	callstack 0
  1616                           
  1617 ;; *************** function _write_string_LCD *****************
  1618 ;; Defined at:
  1619 ;;		line 40 in file "../LCD_disp_Driver.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1622 ;;		 -> STR_4(12), STR_3(12), STR_2(12), STR_1(3), 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1634 ;;      Params:         2       0       0       0       0       0       0       0       0
  1635 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1637 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1638 ;;Total ram usage:        2 bytes
  1639 ;; Hardware stack levels used: 1
  1640 ;; Hardware stack levels required when called: 1
  1641 ;; This function calls:
  1642 ;;		_send_to_LCD
  1643 ;; This function is called by:
  1644 ;;		_disp_Res
  1645 ;;		_disp_Error
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text8
  1650  000FBA                     __ptext8:
  1651                           	callstack 0
  1652  000FBA                     _write_string_LCD:
  1653                           	callstack 27
  1654  000FBA                     
  1655                           ;../LCD_disp_Driver.c: 41:     while(*s)
  1656  000FBA  EFE9  F007         	goto	l1445
  1657  000FBE                     l1441:
  1658                           
  1659                           ;../LCD_disp_Driver.c: 42:         send_to_LCD(*s++);
  1660  000FBE  C004  FFF6         	movff	write_string_LCD@s,tblptrl
  1661  000FC2  C005  FFF7         	movff	write_string_LCD@s+1,tblptrh
  1662  000FC6                     	if	0	;tblptru may be non-zero
  1663  000FC6                     	endif
  1664  000FC6                     	if	0	;tblptru may be non-zero
  1665  000FC6                     	endif
  1666  000FC6  0008               	tblrd		*
  1667  000FC8  50F5               	movf	tablat,w,c
  1668  000FCA  ECF8  F007         	call	_send_to_LCD
  1669  000FCE  4A04               	infsnz	write_string_LCD@s^0,f,c
  1670  000FD0  2A05               	incf	(write_string_LCD@s+1)^0,f,c
  1671  000FD2                     l1445:
  1672                           
  1673                           ;../LCD_disp_Driver.c: 41:     while(*s)
  1674  000FD2  C004  FFF6         	movff	write_string_LCD@s,tblptrl
  1675  000FD6  C005  FFF7         	movff	write_string_LCD@s+1,tblptrh
  1676  000FDA                     	if	0	;tblptru may be non-zero
  1677  000FDA                     	endif
  1678  000FDA                     	if	0	;tblptru may be non-zero
  1679  000FDA                     	endif
  1680  000FDA  0008               	tblrd		*
  1681  000FDC  50F5               	movf	tablat,w,c
  1682  000FDE  0900               	iorlw	0
  1683  000FE0  A4D8               	btfss	status,2,c
  1684  000FE2  EFF5  F007         	goto	u211
  1685  000FE6  EFF7  F007         	goto	u210
  1686  000FEA                     u211:
  1687  000FEA  EFDF  F007         	goto	l1441
  1688  000FEE                     u210:
  1689  000FEE  0012               	return		;funcret
  1690  000FF0                     __end_of_write_string_LCD:
  1691                           	callstack 0
  1692                           
  1693 ;; *************** function _send_to_LCD *****************
  1694 ;; Defined at:
  1695 ;;		line 30 in file "../LCD_disp_Driver.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  xy              1    wreg     unsigned char 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  xy              1    2[COMRAM] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0
  1710 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1711 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1712 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1713 ;;Total ram usage:        3 bytes
  1714 ;; Hardware stack levels used: 1
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;;		_disp_Res
  1720 ;;		_write_string_LCD
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  000FF0                     __ptext9:
  1726                           	callstack 0
  1727  000FF0                     _send_to_LCD:
  1728                           	callstack 30
  1729                           
  1730                           ;incstack = 0
  1731                           ;send_to_LCD@xy stored from wreg
  1732  000FF0  6E03               	movwf	send_to_LCD@xy^0,c
  1733  000FF2                     
  1734                           ;../LCD_disp_Driver.c: 31:     LATCbits.LATC2 = 1;
  1735  000FF2  848B               	bsf	139,2,c	;volatile
  1736                           
  1737                           ;../LCD_disp_Driver.c: 32:     LATCbits.LATC1 = 0;
  1738  000FF4  928B               	bcf	139,1,c	;volatile
  1739                           
  1740                           ;../LCD_disp_Driver.c: 33:     LATCbits.LATC0 = 1;
  1741  000FF6  808B               	bsf	139,0,c	;volatile
  1742  000FF8                     
  1743                           ;../LCD_disp_Driver.c: 34:     LATD = xy;
  1744  000FF8  C003  FF8C         	movff	send_to_LCD@xy,3980	;volatile
  1745  000FFC                     
  1746                           ;../LCD_disp_Driver.c: 35:     __nop();
  1747  000FFC  F000               	nop	
  1748  000FFE                     
  1749                           ;../LCD_disp_Driver.c: 36:     __nop();
  1750  000FFE  F000               	nop	
  1751  001000                     
  1752                           ;../LCD_disp_Driver.c: 37:     LATCbits.LATC0 = 0;
  1753  001000  908B               	bcf	139,0,c	;volatile
  1754  001002                     
  1755                           ;../LCD_disp_Driver.c: 38:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1756  001002  0E03               	movlw	3
  1757  001004  6E02               	movwf	(??_send_to_LCD+1)^0,c
  1758  001006  0E8A               	movlw	138
  1759  001008  6E01               	movwf	??_send_to_LCD^0,c
  1760  00100A  0E56               	movlw	86
  1761  00100C                     u427:
  1762  00100C  2EE8               	decfsz	wreg,f,c
  1763  00100E  D7FE               	bra	u427
  1764  001010  2E01               	decfsz	??_send_to_LCD^0,f,c
  1765  001012  D7FC               	bra	u427
  1766  001014  2E02               	decfsz	(??_send_to_LCD+1)^0,f,c
  1767  001016  D7FA               	bra	u427
  1768  001018  0012               	return		;funcret
  1769  00101A                     __end_of_send_to_LCD:
  1770                           	callstack 0
  1771                           
  1772 ;; *************** function ___awdiv *****************
  1773 ;; Defined at:
  1774 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  dividend        2    0[COMRAM] int 
  1777 ;;  divisor         2    2[COMRAM] int 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  quotient        2    6[COMRAM] int 
  1780 ;;  sign            1    5[COMRAM] unsigned char 
  1781 ;;  counter         1    4[COMRAM] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  2    0[COMRAM] int 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1791 ;;      Params:         4       0       0       0       0       0       0       0       0
  1792 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1794 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1795 ;;Total ram usage:        8 bytes
  1796 ;; Hardware stack levels used: 1
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;;		_disp_Res
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text10
  1806  000D02                     __ptext10:
  1807                           	callstack 0
  1808  000D02                     ___awdiv:
  1809                           	callstack 29
  1810  000D02  0E00               	movlw	0
  1811  000D04  6E06               	movwf	___awdiv@sign^0,c
  1812  000D06  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1813  000D08  EF8A  F006         	goto	u220
  1814  000D0C  EF88  F006         	goto	u221
  1815  000D10                     u221:
  1816  000D10  EF90  F006         	goto	l1613
  1817  000D14                     u220:
  1818  000D14  6C03               	negf	___awdiv@divisor^0,c
  1819  000D16  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1820  000D18  B0D8               	btfsc	status,0,c
  1821  000D1A  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1822  000D1C  0E01               	movlw	1
  1823  000D1E  6E06               	movwf	___awdiv@sign^0,c
  1824  000D20                     l1613:
  1825  000D20  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1826  000D22  EF97  F006         	goto	u230
  1827  000D26  EF95  F006         	goto	u231
  1828  000D2A                     u231:
  1829  000D2A  EF9D  F006         	goto	l1619
  1830  000D2E                     u230:
  1831  000D2E  6C01               	negf	___awdiv@dividend^0,c
  1832  000D30  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1833  000D32  B0D8               	btfsc	status,0,c
  1834  000D34  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1835  000D36  0E01               	movlw	1
  1836  000D38  1A06               	xorwf	___awdiv@sign^0,f,c
  1837  000D3A                     l1619:
  1838  000D3A  0E00               	movlw	0
  1839  000D3C  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1840  000D3E  0E00               	movlw	0
  1841  000D40  6E07               	movwf	___awdiv@quotient^0,c
  1842  000D42  5003               	movf	___awdiv@divisor^0,w,c
  1843  000D44  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1844  000D46  B4D8               	btfsc	status,2,c
  1845  000D48  EFA8  F006         	goto	u241
  1846  000D4C  EFAA  F006         	goto	u240
  1847  000D50                     u241:
  1848  000D50  EFD2  F006         	goto	l1641
  1849  000D54                     u240:
  1850  000D54  0E01               	movlw	1
  1851  000D56  6E05               	movwf	___awdiv@counter^0,c
  1852  000D58  EFB2  F006         	goto	l1627
  1853  000D5C                     l1625:
  1854  000D5C  90D8               	bcf	status,0,c
  1855  000D5E  3603               	rlcf	___awdiv@divisor^0,f,c
  1856  000D60  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1857  000D62  2A05               	incf	___awdiv@counter^0,f,c
  1858  000D64                     l1627:
  1859  000D64  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1860  000D66  EFB7  F006         	goto	u251
  1861  000D6A  EFB9  F006         	goto	u250
  1862  000D6E                     u251:
  1863  000D6E  EFAE  F006         	goto	l1625
  1864  000D72                     u250:
  1865  000D72                     l1629:
  1866  000D72  90D8               	bcf	status,0,c
  1867  000D74  3607               	rlcf	___awdiv@quotient^0,f,c
  1868  000D76  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1869  000D78  5003               	movf	___awdiv@divisor^0,w,c
  1870  000D7A  5C01               	subwf	___awdiv@dividend^0,w,c
  1871  000D7C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1872  000D7E  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1873  000D80  A0D8               	btfss	status,0,c
  1874  000D82  EFC5  F006         	goto	u261
  1875  000D86  EFC7  F006         	goto	u260
  1876  000D8A                     u261:
  1877  000D8A  EFCC  F006         	goto	l1637
  1878  000D8E                     u260:
  1879  000D8E  5003               	movf	___awdiv@divisor^0,w,c
  1880  000D90  5E01               	subwf	___awdiv@dividend^0,f,c
  1881  000D92  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1882  000D94  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1883  000D96  8007               	bsf	___awdiv@quotient^0,0,c
  1884  000D98                     l1637:
  1885  000D98  90D8               	bcf	status,0,c
  1886  000D9A  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1887  000D9C  3203               	rrcf	___awdiv@divisor^0,f,c
  1888  000D9E  2E05               	decfsz	___awdiv@counter^0,f,c
  1889  000DA0  EFB9  F006         	goto	l1629
  1890  000DA4                     l1641:
  1891  000DA4  5006               	movf	___awdiv@sign^0,w,c
  1892  000DA6  B4D8               	btfsc	status,2,c
  1893  000DA8  EFD8  F006         	goto	u271
  1894  000DAC  EFDA  F006         	goto	u270
  1895  000DB0                     u271:
  1896  000DB0  EFDE  F006         	goto	l1645
  1897  000DB4                     u270:
  1898  000DB4  6C07               	negf	___awdiv@quotient^0,c
  1899  000DB6  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1900  000DB8  B0D8               	btfsc	status,0,c
  1901  000DBA  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1902  000DBC                     l1645:
  1903  000DBC  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1904  000DC0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1905  000DC4  0012               	return		;funcret
  1906  000DC6                     __end_of___awdiv:
  1907                           	callstack 0
  1908                           
  1909 ;; *************** function ___wmul *****************
  1910 ;; Defined at:
  1911 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  multiplier      2    0[COMRAM] unsigned int 
  1914 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  product         2    4[COMRAM] unsigned int 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  2    0[COMRAM] unsigned int 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0, prodl, prodh
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1926 ;;      Params:         4       0       0       0       0       0       0       0       0
  1927 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1929 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1930 ;;Total ram usage:        6 bytes
  1931 ;; Hardware stack levels used: 1
  1932 ;; This function calls:
  1933 ;;		Nothing
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text11
  1940  00101A                     __ptext11:
  1941                           	callstack 0
  1942  00101A                     ___wmul:
  1943                           	callstack 30
  1944  00101A  5001               	movf	___wmul@multiplier^0,w,c
  1945  00101C  0203               	mulwf	___wmul@multiplicand^0,c
  1946  00101E  CFF3 F005          	movff	prodl,___wmul@product
  1947  001022  CFF4 F006          	movff	prodh,___wmul@product+1
  1948  001026  5001               	movf	___wmul@multiplier^0,w,c
  1949  001028  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1950  00102A  50F3               	movf	243,w,c
  1951  00102C  2606               	addwf	(___wmul@product+1)^0,f,c
  1952  00102E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1953  001030  0203               	mulwf	___wmul@multiplicand^0,c
  1954  001032  50F3               	movf	243,w,c
  1955  001034  2606               	addwf	(___wmul@product+1)^0,f,c
  1956  001036  C005  F001         	movff	___wmul@product,?___wmul
  1957  00103A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1958  00103E  0012               	return		;funcret
  1959  001040                     __end_of___wmul:
  1960                           	callstack 0
  1961                           
  1962 ;; *************** function _LCD_init *****************
  1963 ;; Defined at:
  1964 ;;		line 5 in file "../LCD_disp_Driver.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;		None
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1978 ;;      Params:         0       0       0       0       0       0       0       0       0
  1979 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1980 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1981 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1982 ;;Total ram usage:        2 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; Hardware stack levels required when called: 1
  1985 ;; This function calls:
  1986 ;;		_LCD_cmd
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text12
  1993  000EAC                     __ptext12:
  1994                           	callstack 0
  1995  000EAC                     _LCD_init:
  1996                           	callstack 29
  1997  000EAC                     
  1998                           ;../LCD_disp_Driver.c: 6:     TRISD = 0x00;
  1999  000EAC  0E00               	movlw	0
  2000  000EAE  6E95               	movwf	149,c	;volatile
  2001  000EB0                     
  2002                           ;../LCD_disp_Driver.c: 7:     LATCbits.LATC2 = 0;
  2003  000EB0  948B               	bcf	139,2,c	;volatile
  2004  000EB2                     
  2005                           ;../LCD_disp_Driver.c: 8:     LATCbits.LATC1 = 0;
  2006  000EB2  928B               	bcf	139,1,c	;volatile
  2007  000EB4                     
  2008                           ;../LCD_disp_Driver.c: 9:     LATCbits.LATC0 = 0;
  2009  000EB4  908B               	bcf	139,0,c	;volatile
  2010                           
  2011                           ;../LCD_disp_Driver.c: 10:     LATC = 0;
  2012  000EB6  0E00               	movlw	0
  2013  000EB8  6E8B               	movwf	139,c	;volatile
  2014  000EBA                     
  2015                           ;../LCD_disp_Driver.c: 11:     TRISCbits.TRISC0 = 0;
  2016  000EBA  9094               	bcf	148,0,c	;volatile
  2017  000EBC                     
  2018                           ;../LCD_disp_Driver.c: 12:     TRISCbits.TRISC2 = 0;
  2019  000EBC  9494               	bcf	148,2,c	;volatile
  2020  000EBE                     
  2021                           ;../LCD_disp_Driver.c: 13:     TRISCbits.TRISC1 = 0;
  2022  000EBE  9294               	bcf	148,1,c	;volatile
  2023  000EC0                     
  2024                           ;../LCD_disp_Driver.c: 14:     LCD_cmd(0b00111000);
  2025  000EC0  0E38               	movlw	56
  2026  000EC2  EC2B  F008         	call	_LCD_cmd
  2027  000EC6                     
  2028                           ;../LCD_disp_Driver.c: 15:     _delay((unsigned long)((250)*(8000000/4000.0)));
  2029  000EC6  0E03               	movlw	3
  2030  000EC8  6E03               	movwf	(??_LCD_init+1)^0,c
  2031  000ECA  0E8A               	movlw	138
  2032  000ECC  6E02               	movwf	??_LCD_init^0,c
  2033  000ECE  0E56               	movlw	86
  2034  000ED0                     u437:
  2035  000ED0  2EE8               	decfsz	wreg,f,c
  2036  000ED2  D7FE               	bra	u437
  2037  000ED4  2E02               	decfsz	??_LCD_init^0,f,c
  2038  000ED6  D7FC               	bra	u437
  2039  000ED8  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  2040  000EDA  D7FA               	bra	u437
  2041  000EDC                     
  2042                           ;../LCD_disp_Driver.c: 16:     LCD_cmd(0b00001110);
  2043  000EDC  0E0E               	movlw	14
  2044  000EDE  EC2B  F008         	call	_LCD_cmd
  2045  000EE2                     
  2046                           ;../LCD_disp_Driver.c: 17:     _delay((unsigned long)((250)*(8000000/4000.0)));
  2047  000EE2  0E03               	movlw	3
  2048  000EE4  6E03               	movwf	(??_LCD_init+1)^0,c
  2049  000EE6  0E8A               	movlw	138
  2050  000EE8  6E02               	movwf	??_LCD_init^0,c
  2051  000EEA  0E56               	movlw	86
  2052  000EEC                     u447:
  2053  000EEC  2EE8               	decfsz	wreg,f,c
  2054  000EEE  D7FE               	bra	u447
  2055  000EF0  2E02               	decfsz	??_LCD_init^0,f,c
  2056  000EF2  D7FC               	bra	u447
  2057  000EF4  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  2058  000EF6  D7FA               	bra	u447
  2059  000EF8                     
  2060                           ;../LCD_disp_Driver.c: 18:     LCD_cmd(0b00000001);
  2061  000EF8  0E01               	movlw	1
  2062  000EFA  EC2B  F008         	call	_LCD_cmd
  2063  000EFE                     
  2064                           ;../LCD_disp_Driver.c: 19:     _delay((unsigned long)((250)*(8000000/4000.0)));
  2065  000EFE  0E03               	movlw	3
  2066  000F00  6E03               	movwf	(??_LCD_init+1)^0,c
  2067  000F02  0E8A               	movlw	138
  2068  000F04  6E02               	movwf	??_LCD_init^0,c
  2069  000F06  0E56               	movlw	86
  2070  000F08                     u457:
  2071  000F08  2EE8               	decfsz	wreg,f,c
  2072  000F0A  D7FE               	bra	u457
  2073  000F0C  2E02               	decfsz	??_LCD_init^0,f,c
  2074  000F0E  D7FC               	bra	u457
  2075  000F10  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  2076  000F12  D7FA               	bra	u457
  2077  000F14  0012               	return		;funcret
  2078  000F16                     __end_of_LCD_init:
  2079                           	callstack 0
  2080                           
  2081 ;; *************** function _LCD_cmd *****************
  2082 ;; Defined at:
  2083 ;;		line 21 in file "../LCD_disp_Driver.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  cx              1    wreg     unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  cx              1    0[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0
  2098 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2100 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2101 ;;Total ram usage:        1 bytes
  2102 ;; Hardware stack levels used: 1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_main
  2107 ;;		_get_Num
  2108 ;;		_get_Func
  2109 ;;		_disp_Error
  2110 ;;		_LCD_init
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text13
  2115  001056                     __ptext13:
  2116                           	callstack 0
  2117  001056                     _LCD_cmd:
  2118                           	callstack 28
  2119                           
  2120                           ;incstack = 0
  2121                           ;LCD_cmd@cx stored from wreg
  2122  001056  6E01               	movwf	LCD_cmd@cx^0,c
  2123  001058                     
  2124                           ;../LCD_disp_Driver.c: 22:     LATCbits.LATC2 = 0;
  2125  001058  948B               	bcf	139,2,c	;volatile
  2126                           
  2127                           ;../LCD_disp_Driver.c: 23:     LATCbits.LATC1 = 0;
  2128  00105A  928B               	bcf	139,1,c	;volatile
  2129                           
  2130                           ;../LCD_disp_Driver.c: 24:     LATCbits.LATC0 = 1;
  2131  00105C  808B               	bsf	139,0,c	;volatile
  2132                           
  2133                           ;../LCD_disp_Driver.c: 25:     __nop();
  2134  00105E  F000               	nop	
  2135  001060                     
  2136                           ;../LCD_disp_Driver.c: 26:     LATD = cx;
  2137  001060  C001  FF8C         	movff	LCD_cmd@cx,3980	;volatile
  2138  001064                     
  2139                           ;../LCD_disp_Driver.c: 27:     __nop();
  2140  001064  F000               	nop	
  2141  001066                     
  2142                           ;../LCD_disp_Driver.c: 28:     LATCbits.LATC0 = 0;
  2143  001066  908B               	bcf	139,0,c	;volatile
  2144  001068  0012               	return		;funcret
  2145  00106A                     __end_of_LCD_cmd:
  2146                           	callstack 0
  2147                           
  2148                           	psect	rparam
  2149  0000                     
  2150                           	psect	idloc
  2151                           
  2152                           ;Config register IDLOC0 @ 0x200000
  2153                           ;	unspecified, using default values
  2154  200000                     	org	2097152
  2155  200000  FF                 	db	255
  2156                           
  2157                           ;Config register IDLOC1 @ 0x200001
  2158                           ;	unspecified, using default values
  2159  200001                     	org	2097153
  2160  200001  FF                 	db	255
  2161                           
  2162                           ;Config register IDLOC2 @ 0x200002
  2163                           ;	unspecified, using default values
  2164  200002                     	org	2097154
  2165  200002  FF                 	db	255
  2166                           
  2167                           ;Config register IDLOC3 @ 0x200003
  2168                           ;	unspecified, using default values
  2169  200003                     	org	2097155
  2170  200003  FF                 	db	255
  2171                           
  2172                           ;Config register IDLOC4 @ 0x200004
  2173                           ;	unspecified, using default values
  2174  200004                     	org	2097156
  2175  200004  FF                 	db	255
  2176                           
  2177                           ;Config register IDLOC5 @ 0x200005
  2178                           ;	unspecified, using default values
  2179  200005                     	org	2097157
  2180  200005  FF                 	db	255
  2181                           
  2182                           ;Config register IDLOC6 @ 0x200006
  2183                           ;	unspecified, using default values
  2184  200006                     	org	2097158
  2185  200006  FF                 	db	255
  2186                           
  2187                           ;Config register IDLOC7 @ 0x200007
  2188                           ;	unspecified, using default values
  2189  200007                     	org	2097159
  2190  200007  FF                 	db	255
  2191                           
  2192                           	psect	config
  2193                           
  2194                           ;Config register CONFIG1L @ 0x300000
  2195                           ;	PLL Selection
  2196                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2197                           ;	PLL Enable Configuration bit
  2198                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2199                           ;	CPU System Clock Postscaler
  2200                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2201                           ;	Low Speed USB mode with 48 MHz system clock
  2202                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2203  300000                     	org	3145728
  2204  300000  00                 	db	0
  2205                           
  2206                           ;Config register CONFIG1H @ 0x300001
  2207                           ;	Oscillator Selection
  2208                           ;	FOSC = INTOSCIO, Internal oscillator
  2209                           ;	Primary Oscillator Shutdown
  2210                           ;	PCLKEN = ON, Primary oscillator enabled
  2211                           ;	Fail-Safe Clock Monitor
  2212                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2213                           ;	Internal/External Oscillator Switchover
  2214                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2215  300001                     	org	3145729
  2216  300001  28                 	db	40
  2217                           
  2218                           ;Config register CONFIG2L @ 0x300002
  2219                           ;	Power-up Timer Enable
  2220                           ;	nPWRTEN = OFF, Power up timer disabled
  2221                           ;	Brown-out Reset Enable
  2222                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  2223                           ;	Brown-out Reset Voltage
  2224                           ;	BORV = 190, BOR set to 1.9V nominal
  2225                           ;	Low-Power Brown-out Reset
  2226                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2227  300002                     	org	3145730
  2228  300002  5F                 	db	95
  2229                           
  2230                           ;Config register CONFIG2H @ 0x300003
  2231                           ;	Watchdog Timer Enable bits
  2232                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2233                           ;	Watchdog Timer Postscaler
  2234                           ;	WDTPS = 32768, 1:32768
  2235  300003                     	org	3145731
  2236  300003  3C                 	db	60
  2237                           
  2238                           ; Padding undefined space
  2239  300004                     	org	3145732
  2240  300004  FF                 	db	255
  2241                           
  2242                           ;Config register CONFIG3H @ 0x300005
  2243                           ;	CCP2 MUX bit
  2244                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2245                           ;	PORTB A/D Enable bit
  2246                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  2247                           ;	Timer3 Clock Input MUX bit
  2248                           ;	T3CMX = RC0, T3CKI function is on RC0
  2249                           ;	SDO Output MUX bit
  2250                           ;	SDOMX = RB3, SDO function is on RB3
  2251                           ;	Master Clear Reset Pin Enable
  2252                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2253  300005                     	org	3145733
  2254  300005  D3                 	db	211
  2255                           
  2256                           ;Config register CONFIG4L @ 0x300006
  2257                           ;	Stack Full/Underflow Reset
  2258                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2259                           ;	Single-Supply ICSP Enable bit
  2260                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  2261                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2262                           ;	ICPRT = OFF, ICPORT disabled
  2263                           ;	Extended Instruction Set Enable bit
  2264                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2265                           ;	Background Debugger Enable bit
  2266                           ;	DEBUG = 0x1, unprogrammed default
  2267  300006                     	org	3145734
  2268  300006  85                 	db	133
  2269                           
  2270                           ; Padding undefined space
  2271  300007                     	org	3145735
  2272  300007  FF                 	db	255
  2273                           
  2274                           ;Config register CONFIG5L @ 0x300008
  2275                           ;	Block 0 Code Protect
  2276                           ;	CP0 = OFF, Block 0 is not code-protected
  2277                           ;	Block 1 Code Protect
  2278                           ;	CP1 = OFF, Block 1 is not code-protected
  2279                           ;	Block 2 Code Protect
  2280                           ;	CP2 = OFF, Block 2 is not code-protected
  2281                           ;	Block 3 Code Protect
  2282                           ;	CP3 = OFF, Block 3 is not code-protected
  2283  300008                     	org	3145736
  2284  300008  0F                 	db	15
  2285                           
  2286                           ;Config register CONFIG5H @ 0x300009
  2287                           ;	Boot Block Code Protect
  2288                           ;	CPB = OFF, Boot block is not code-protected
  2289                           ;	Data EEPROM Code Protect
  2290                           ;	CPD = OFF, Data EEPROM is not code-protected
  2291  300009                     	org	3145737
  2292  300009  C0                 	db	192
  2293                           
  2294                           ;Config register CONFIG6L @ 0x30000A
  2295                           ;	Block 0 Write Protect
  2296                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2297                           ;	Block 1 Write Protect
  2298                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2299                           ;	Block 2 Write Protect
  2300                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2301                           ;	Block 3 Write Protect
  2302                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2303  30000A                     	org	3145738
  2304  30000A  0F                 	db	15
  2305                           
  2306                           ;Config register CONFIG6H @ 0x30000B
  2307                           ;	Configuration Registers Write Protect
  2308                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2309                           ;	Boot Block Write Protect
  2310                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2311                           ;	Data EEPROM Write Protect
  2312                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2313  30000B                     	org	3145739
  2314  30000B  E0                 	db	224
  2315                           
  2316                           ;Config register CONFIG7L @ 0x30000C
  2317                           ;	Block 0 Table Read Protect
  2318                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2319                           ;	Block 1 Table Read Protect
  2320                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2321                           ;	Block 2 Table Read Protect
  2322                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2323                           ;	Block 3 Table Read Protect
  2324                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2325  30000C                     	org	3145740
  2326  30000C  0F                 	db	15
  2327                           
  2328                           ;Config register CONFIG7H @ 0x30000D
  2329                           ;	Boot Block Table Read Protect
  2330                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2331  30000D                     	org	3145741
  2332  30000D  40                 	db	64
  2333                           tosu	equ	0xFFF
  2334                           tosh	equ	0xFFE
  2335                           tosl	equ	0xFFD
  2336                           stkptr	equ	0xFFC
  2337                           pclatu	equ	0xFFB
  2338                           pclath	equ	0xFFA
  2339                           pcl	equ	0xFF9
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           indf0	equ	0xFEF
  2347                           postinc0	equ	0xFEE
  2348                           postdec0	equ	0xFED
  2349                           preinc0	equ	0xFEC
  2350                           plusw0	equ	0xFEB
  2351                           fsr0h	equ	0xFEA
  2352                           fsr0l	equ	0xFE9
  2353                           wreg	equ	0xFE8
  2354                           indf1	equ	0xFE7
  2355                           postinc1	equ	0xFE6
  2356                           postdec1	equ	0xFE5
  2357                           preinc1	equ	0xFE4
  2358                           plusw1	equ	0xFE3
  2359                           fsr1h	equ	0xFE2
  2360                           fsr1l	equ	0xFE1
  2361                           bsr	equ	0xFE0
  2362                           indf2	equ	0xFDF
  2363                           postinc2	equ	0xFDE
  2364                           postdec2	equ	0xFDD
  2365                           preinc2	equ	0xFDC
  2366                           plusw2	equ	0xFDB
  2367                           fsr2h	equ	0xFDA
  2368                           fsr2l	equ	0xFD9
  2369                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    16
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    write_string_LCD@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_4(CODE[12]), STR_3(CODE[12]), STR_2(CODE[12]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_get_Num
    _get_Num->_disp_Error
    _get_Key->_kbd_scanner
    _get_Func->_disp_Error
    _disp_Error->_write_string_LCD
    _disp_Res->___awdiv
    _write_string_LCD->_send_to_LCD
    _LCD_init->_LCD_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4648
                                             16 COMRAM     4     4      0
                            _LCD_cmd
                           _LCD_init
                            ___awdiv
                             ___wmul
                         _disp_Error
                           _disp_Res
                           _get_Func
                            _get_Key
                            _get_Num
                           _kbd_init
                        _send_to_LCD
 ---------------------------------------------------------------------------------
 (1) _kbd_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_Num                                              7     5      2     722
                                              9 COMRAM     7     5      2
                            _LCD_cmd
                         _disp_Error
 ---------------------------------------------------------------------------------
 (1) _get_Key                                              2     2      0       0
                                              2 COMRAM     2     2      0
                        _kbd_scanner
 ---------------------------------------------------------------------------------
 (2) _kbd_scanner                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_Func                                             1     1      0     797
                                              9 COMRAM     1     1      0
                            _LCD_cmd
                         _disp_Error
 ---------------------------------------------------------------------------------
 (2) _disp_Error                                           4     2      2     643
                                              5 COMRAM     4     2      2
                            _LCD_cmd
                   _write_string_LCD
 ---------------------------------------------------------------------------------
 (1) _disp_Res                                             4     2      2    1482
                                              8 COMRAM     4     2      2
                            ___awdiv
                             ___wmul (ARG)
                        _send_to_LCD
                   _write_string_LCD
 ---------------------------------------------------------------------------------
 (3) _write_string_LCD                                     2     0      2     371
                                              3 COMRAM     2     0      2
                        _send_to_LCD
 ---------------------------------------------------------------------------------
 (1) _send_to_LCD                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              1 COMRAM     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_cmd
   _LCD_init
     _LCD_cmd
   ___awdiv
   ___wmul
   _disp_Error
     _LCD_cmd
     _write_string_LCD
       _send_to_LCD
   _disp_Res
     ___awdiv
     ___wmul (ARG)
     _send_to_LCD (ARG)
     _write_string_LCD (ARG)
   _get_Func
     _LCD_cmd
     _disp_Error
   _get_Key
     _kbd_scanner
   _get_Num
     _LCD_cmd
     _disp_Error
   _kbd_init
   _send_to_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      1A       1       27.4%
BITBIGSFRlhhh       3D      0       0      22        0.0%
BITBIGSFRlhlll      24      0       0      26        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRhh          E      0       0      20        0.0%
BITBIGSFRll          9      0       0      27        0.0%
BITBIGSFRlhlhh       6      0       0      23        0.0%
BITBIGSFRlhlhl       4      0       0      24        0.0%
BITBIGSFRlhllh       3      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      28        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Jun 03 14:32:16 2022

            disp_Res@numb 0009                        l70 0D00                        l39 0BDE  
                      l80 0EAA                        l74 0E40                        l58 0CF8  
                      l88 0F7C              ___awdiv@sign 0006       ___wmul@multiplicand 0003  
          disp_Error@numb 0006                       l114 0A30                       l109 107A  
                     l142 0FB8                       l161 0F14                       l164 1068  
                     l173 0FEE                       l407 0DC4                       l167 1018  
                     l176 103E                       u210 0FEE                       u211 0FEA  
                     u220 0D14                       u300 0DF8                       u221 0D10  
                     u301 0DF4                       u230 0D2E                       u310 0E0A  
                     u231 0D2A                       u311 0E06                       u240 0D54  
                     u320 0E1C                       u400 0BC4                       u241 0D50  
                     u321 0E18                       u401 0BC0                       u250 0D72  
                     u330 0E2E                       u251 0D6E                       u331 0E2A  
                     u260 0D8E                       u340 0E54                       u261 0D8A  
                     u341 0E50                       u270 0DB4                       u350 0E90  
                     u271 0DB0                       u351 0E8C                       u280 0FB6  
                     u360 0A6C                       u281 0FB2                       u417 0F96  
                     u361 0A68                       u290 0DDA                       u370 0A92  
                     u427 100C                       u291 0DD6                       u371 0A8E  
                     u380 0AC0                       u437 0ED0                       u381 0ABC  
                     u390 0ADE                       u447 0EEC                       u391 0ADA  
                     u457 0F08                       _key 001A                       wreg 000FE8  
         __end_of_LCD_cmd 106A                      l2001 0F66                      l1421 0FF8  
                    l1501 08BC                      l1431 1058                      l1423 0FFC  
                    l1433 1060                      l1425 0FFE                      l1441 0FBE  
                    l1513 08DC                      l1521 08EC                      l1435 1064  
                    l1611 0D1C                      l1427 1000                      l1419 0FF2  
                    l1443 0FCE                      l1451 0F30                      l1531 093E  
                    l1523 0926                      l1507 08CC                      l1437 1066  
                    l1621 0D42                      l1613 0D20                      l1605 0D02  
                    l1429 1002                      l1445 0FD2                      l1453 0F40  
                    l1525 092E                      l1701 0C1C                      l1631 0D78  
                    l1623 0D54                      l1615 0D2E                      l1607 0D06  
                    l1439 0FBA                      l1447 0F16                      l1543 095E  
                    l1551 096E                      l1471 083A                      l1463 0822  
                    l1711 0C58                      l1703 0C28                      l1633 0D8E  
                    l1625 0D5C                      l1641 0DA4                      l1617 0D36  
                    l1609 0D14                      l1449 0F20                      l1457 0F50  
                    l1561 09C0                      l1553 09A8                      l1537 094E  
                    l1465 082A                      l1713 0C64                      l1705 0C34  
                    l1801 0A92                      l1651 0EB0                      l1643 0DB4  
                    l1635 0D96                      l1627 0D64                      l1619 0D3A  
                    l1731 0DDA                      l1555 09B0                      l1483 085A  
                    l1491 086A                      l1715 0C6A                      l1707 0C40  
                    l1723 0C86                      l1811 0AC6                      l1803 0A98  
                    l1661 0EBE                      l1653 0EB2                      l1645 0DBC  
                    l1637 0D98                      l1629 0D72                      l1741 0E0A  
                    l1733 0DE0                      l1573 09E0                      l1581 09F0  
                    l1493 08A4                      l1477 084A                      l1717 0C76  
                    l1709 0C4C                      l1821 0B02                      l1813 0ACC  
                    l1805 0A9E                      l1671 0EF8                      l1663 0EC0  
                    l1655 0EB4                      l1639 0D9E                      l1743 0E1C  
                    l1751 0E3E                      l1583 0A2A                      l1567 09D0  
                    l1495 08AC                      l1831 0B62                      l1823 0B12  
                    l1815 0ADE                      l1807 0AAC                      l1673 0EFE  
                    l1665 0EC6                      l1657 0EBA                      l1649 0EAC  
                    l1761 0E60                      l1745 0E2E                      l1737 0DE6  
                    l1729 0DC8                      l1585 0A2E                      l1681 0F86  
                    l1841 0BC4                      l1833 0B6E                      l1825 0B1C  
                    l1817 0AE8                      l1809 0AC0                      l1667 0EDC  
                    l1659 0EBC                      l1771 0EA2                      l1763 0E68  
                    l1755 0E42                      l1739 0DF8                      l1683 0F8C  
                    l1691 0BE8                      l1675 106A                      l1843 0BCE  
                    l1827 0B3C                      l1819 0AF8                      l1669 0EE2  
                    l1773 101A                      l1765 0E80                      l1757 0E46  
                    l1685 0FA4                      l1693 0BEC                      l1677 1078  
                    l1829 0B46                      l1837 0B78                      l1781 0A36  
                    l1775 1036                      l1767 0E90                      l1759 0E54  
                    l1687 0FB6                      l1679 0F7E                      l1695 0BF8  
                    l1839 0BB2                      l1791 0A58                      l1783 0A3A  
                    l1769 0E98                      l1697 0C04                      l1793 0A6C  
                    l1785 0A3E                      l1699 0C10                      l1795 0A72  
                    l1787 0A44                      l1779 0A32                      l1797 0A78  
                    l1789 0A4A                      l1991 0C9A                      l1799 0A80  
                    l1993 087E                      l1995 0900                      l1997 0982  
                    l1989 0B8C                      l1999 0A04                      STR_1 081D  
                    STR_2 0811                      STR_3 0811                      STR_4 0811  
                    _LATB 000F8A                      _LATC 000F8B                      _LATD 000F8C  
                    _WPUB 000F85                      _main 0A32                      _num1 0017  
                    _num2 0015                      _oper 0019                      prodh 000FF4  
                    prodl 000FF3                      start 0000              ___param_bank 000000  
        __end_of_LCD_init 0F16                     ?_main 0001           __end_of___awdiv 0DC6  
         ___awdiv@divisor 0003           ___awdiv@counter 0005                     _PORTB 000F81  
                   _TRISB 000F93                     _TRISD 000F95           __end_of_get_Key 0FBA  
         __end_of_get_Num 0D02                     tablat 000FF5                     status 000FD8  
         __initialization 1040              __end_of_main 0BE6                    ??_main 0011  
           __activetblptr 000002                 ??_LCD_cmd 0001              ?_send_to_LCD 0001  
        ___awdiv@dividend 0001                    _ANSELB 000F5C                    _OSCCON 000FD3  
       disp_Res@UnitDigit 000B          __end_of_get_Func 0E42          __end_of_kbd_init 107C  
        __end_of_disp_Res 0EAC                    ___wmul 101A                 ??___awdiv 0005  
        ___awdiv@quotient 0007                    isa$std 000001                 ??_get_Key 0003  
               ??_get_Num 000C              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 104C                 ?_LCD_init 0001             ___rparam_used 000001  
          __pcstackCOMRAM 0001                 LCD_cmd@cx 0001          _write_string_LCD 0FBA  
              ??_LCD_init 0002                   ?___wmul 0001        disp_Res@TenthDigit 000C  
              _disp_Error 0F16                   _LCD_cmd 1056                 ?_get_Func 0001  
               ?_kbd_init 0001                 ?_disp_Res 0009         __end_of_kbdMatrix 0811  
                 __Hparam 0000                   __Lparam 0000                   ___awdiv 0D02  
            __psmallconst 0800                   __pcinit 1040                   __ramtop 0800  
                 _get_Key 0F7E                   __ptext0 0A32                   __ptext1 106A  
                 __ptext2 0BE6                   __ptext3 0F7E                   __ptext4 0822  
                 __ptext5 0DC6                   __ptext6 0F16                   __ptext7 0E42  
                 _get_Num 0BE6                   __ptext8 0FBA                   __ptext9 0FF0  
              ??_get_Func 000A                ??_kbd_init 0001                ??_disp_Res 000B  
    end_of_initialization 104C         write_string_LCD@s 0004             __Lmediumconst 0000  
              get_Num@num 000F               ?_disp_Error 0006                 _TRISCbits 000F94  
           ??_kbd_scanner 0001  __end_of_write_string_LCD 0FF0             send_to_LCD@xy 0003  
          __end_of___wmul 1040       start_initialization 1040       __end_of_kbd_scanner 0A32  
                ??___wmul 0005                  ?_LCD_cmd 0001               __pbssCOMRAM 0015  
               _kbdMatrix 0801                  ?___awdiv 0001                  ?_get_Key 0001  
                ?_get_Num 000A               __smallconst 0800             ??_send_to_LCD 0001  
             _kbd_scanner 0822            ___wmul@product 0005                  _LATCbits 000F8B  
                _LCD_init 0EAC                 get_Num@ch 000E         ___wmul@multiplier 0001  
            ??_disp_Error 0008               _INTCON2bits 000FF1         ?_write_string_LCD 0004  
     __end_of_send_to_LCD 101A        ??_write_string_LCD 0006                  __Hrparam 0000  
      __end_of_disp_Error 0F7E                  __Lrparam 0000                  _main$876 0013  
                __ptext10 0D02                  __ptext11 101A                  _get_Func 0DC6  
                __ptext12 0EAC                  __ptext13 1056                  _kbd_init 106A  
                _disp_Res 0E42                  isa$xinst 000000               _send_to_LCD 0FF0  
             get_Func@chf 000A              ?_kbd_scanner 0001  
